#####################################################################
#  Homing definition
#####################################################################
[homing_override]
axes: z
set_position_z: 0
gcode:
  ##### get user defines #####
  # use -10 as default to insure it error in case the variable is not existing
  {% set z_endstop_x = printer["gcode_macro _USER_VARIABLE"].z_endstop_x|default(-10) %}
  {% set z_endstop_y = printer["gcode_macro _USER_VARIABLE"].z_endstop_y|default(-10) %}
  {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_HOMING
  G91              ; set relative
  G0 Z{z_hop} F900 ; lift nozzle
  G90              ; set absolute
  ## reduce current of Z motors
  _SET_ACC VAL=HOME
  _SET_Z_CURRENT VAL=HOME
  # Home X and Y only for G28 or G28 XYZ
  {% if 'Z' in params|upper %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
  {% else %}
    G28 X Y
  {% endif %}      
  ##	XY Location of the Z Endstop Switch
  G0 X{z_endstop_x} Y{z_endstop_y} F15000 
  # Home Z
  G28 Z
  SERVO_OFF
  _SET_Z_CURRENT
  ## снять сопло со штифта
  G0 Z{z_hop} F300
  ## вернуться к текущим настройкам
  _SET_ACC
  # Lift Z
  G0 Z{z_hop} F1800
  RESTORE_GCODE_STATE NAME=STATE_HOMING

#####################################################################
#  Macros
#####################################################################
## условный дом
[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _SET_Z_CURRENT]
description: Helper: Set Z-drive motor current
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default('RUN') %}
  
  {% if val == 'HOME' %}
    {% set z_run  = printer["gcode_macro _USER_VARIABLE"].z_home_current %}
    {% set z_hold = printer["gcode_macro _USER_VARIABLE"].z_home_current %}
  {% else %}
    {% set z_run   = printer.configfile.settings["tmc2208 stepper_z"]["run_current"] %}
    {% set z_hold  = printer.configfile.settings["tmc2208 stepper_z"]["hold_current"] %}
  {% endif %}
  {% if val != printer["gcode_macro _SET_Z_CURRENT"].last_val  %}
    SET_GCODE_VARIABLE MACRO=_SET_Z_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("Home&Probe: RunCur %.2fA rms HoldCur %.2fA rms" % (z_run|float, z_hold|float))}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run}  HOLDCURRENT={z_hold}
    M400
  {% endif %}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = printer["gcode_macro _USER_VARIABLE"].home_accel %}
  {% set print_accel = printer["gcode_macro _USER_VARIABLE"].print_accel %}
  {% if val == 'HOME' %}
    # сохранить старые значения и применить значения дома
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int / 2 %}
  {% elif val == 'CONFIG' %}
    # установить все значения конфигурации
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% elif val == 'PRINT' %}
    # сохранить старые значения и применить значения дома
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = print_accel %}
    {% set accel_to_decel = print_accel|int * 3 / 5 %}
  {% else %}
    # загрузить сохраненные значения
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}
  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}