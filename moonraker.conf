[server]
host: 0.0.0.0
port: 7125
klippy_uds_address: /tmp/klippy_uds
#   The maximum size allowed for a file upload.  Default is 1024 MiB.
max_upload_size: 1024
#   The port to listen on for SSL (HTTPS) connections.  Note that the HTTPS
#   server will only be started of the certificate and key options outlined
#   below are provied.  The default is 7130.
#ssl_port: 7130
#   The path to a self signed ssl certificate.  The default is no path, which
#   disables HTTPS.
#ssl_certificate_path:
#   The path to the private key used to signed the certificate.  The default
#   is no path, which disables HTTPS.
#ssl_key_path:

[file_manager]
#   When set to True the file manager will add uploads to the job_queue when
#   the `start_print` flag has been set. The default if False.
queue_gcode_uploads: False
#   When set to True gcode files will be run through a "preprocessor"
#   during metdata extraction if object tags are detected.  This preprocessor
#   replaces object tags with G-Code commands compatible with Klipper's
#   "cancel object" functionality.  Note that this process is file I/O intensive,
#   it is not recommended for usage on low resource SBCs such as a Pi Zero.
#   The default is False.
enable_object_processing: True

[machine]
provider: systemd_dbus
#   The provider implementation used to collect system service information
#   and run service actions (ie: start, restart, stop).  This can be "none",
#   "systemd_dbus", or "systemd_cli".  If the provider is set to "none" service
#   action APIs will be disabled.  The default is systemd_dbus.

[database]
#enable_database_debug: False

[data_store]
#   The maximum number of temperature values to store for each sensor. Note
#   that this value also applies to the "target", "power", and "fan_speed"
#   if the sensor reports them. The default is 1200, which is enough to
#   store approximately 20 minutes of data at one value per second.
temperature_store_size: 3600
#   The maximum number "gcode lines" to store. The default is 1000.
gcode_store_size:  2000

[job_queue]
#   When set to true the job queue will attempt to load the next
#   pending job when Klipper reports as "Ready".  If the queue has
#   been paused it will automatically resume.  Note that neither
#   the job_transition_delay nor the job_transition_gcode are
#   applied in this case.  The default is False.
load_on_startup: False
#   When set to True the queue will automatically transition to
#   the next job in the queue after the current job is complete.
#   This is useful for belt printers and other machines with the
#   ability to automate clearing of the build area.  When False
#   the queue will be paused after each job is loaded, requiring
#   that users manually resume to load the next print.  The default
#   is False.
automatic_transition: False
#   The amount of time to delay after completion of a job before
#   loading the next job on the queue.  The default is no delay.
#job_transition_delay:
#   A gcode to execute after the completion of a job before the next
#   job is loaded.  If a "job_transition_delay" has been configured
#   this gcode will run after the delay.  The default is no gcode.
#job_transition_gcode:

[authorization]
login_timeout:90
#   The time, in days, after which a user is forced to re-enter their
#   credentials to log in.  This period begins when a logged out user
#   first logs in.  Successive logins without logging out will not
#   renew the timeout.  The default is 90 days.
trusted_clients:
    127.0.0.1
    192.168.0.0/16
#   my-printer.lan
#   A list of newline separated ip addresses, ip ranges, or fully qualified
#   domain names that are trusted. Trusted clients are given full access to
#   the API.  Both IPv4 and IPv6 addresses and ranges are supported. Ranges
#   must be expressed in CIDR notation (see http://ip.sb/cidr for more info).
#   For example, an entry of 192.168.1.0/24 will authorize IPs in the range of
#   192.168.1.1 - 192.168.1.254.  Note that when specifying IPv4 ranges the
#   last segment of the ip address must be 0. The default is no clients are
#   trusted.
cors_domains:
#    http://*.local
#    http://*.lan
    http://app.fluidd.xyz
    https://app.fluidd.xyz
#    http://klipper-printer.local
#    http://second-printer.local:7125
#   Enables CORS for the specified domains.  One may specify * if they wish
#   to allow all domains, however this should be an option reserved for
#   client developers and not used in production.  A * can also be used
#   to specify a wildcard that matches several domains.  For example:
#     *.local
#     http://*.my-domain.com
#     *.my-domain.com:*
#   Are all valid entries.  However, a wildcard may not be specified in
#   the top level domain:
#      http://my-printer.*
#   The above example will be rejected.
#   When CORS is enabled by adding an entry to this option, all origins
#   matching the "trusted_clients" option will have CORS headers set as
#   well.  If this option is not specified then CORS is disabled.
force_logins: False
#   When set to True a user login is required for authorization if at least
#   one user has been created, overriding the "trusted_clients" configuration.
#   If no users have been created then trusted client checks will apply.
#   The default is False.

[octoprint_compat]

[history]

# this enables moonraker announcements for fluidd
[announcements]
subscriptions:
  fluidd


[update_manager]
#   When set to True moonraker will bypass repo validation and allow
#   updates from unofficial remotes and/or branches.  Updates on
#   detached repos are also allowed.  This option is intended for
#   developers and should not be used on production machines.  The
#   default is False.
enable_auto_refresh: True
#   When set to True Moonraker will attempt to fetch status about
#   available updates roughly every 24 hours, between 12am-4am.
#   When set to False Moonraker will only fetch update state on startup
#   and clients will need to request that Moonraker updates state.  The
#   default is False.
refresh_interval: 72
#   The interval (in hours) after which the update manager will check
#   for new updates.  This interval is applies to updates for Moonraker,
#   Klipper, and System Packages, and is the default for all clients.
#   The default is 672 hours (28 days).
enable_system_updates: True
#   A boolean value that can be used to toggle system package updates.
#   Currently Moonraker only supports updating packages via APT, so
#   this option is useful for users that wish to experiment with linux
#   distros that use other package management applications, or users
#   that prefer to manage their packages directly.  Note that if this
#   is set to False users will be need to make sure that all system
#   dependencies are up to date.  The default is True.
enable_packagekit: True
#   This option is available when system updates are enabled via the
#   "enable_system_updates" option.  When set to True, system package
#   updates will be processed via PackageKit over D-Bus.  When set to False
#   the "apt cli" fallback will be used.  The default is True.
channel: dev
#   The update channel applied to Klipper and Moonraker.  May be 'dev'
#   which will fetch updates using git, or 'beta' which will fetch
#   zipped beta releases.  Note that this channel does not apply to
#   client updates, a client's update channel is determined by its
#   'type' option.  When this option is changed the next "update" will
#   swap channels, any untracked files in the application's path will be
#   removed during this process.  The default is dev.

[update_manager fluidd]
type: web
channel: stable
repo: ShohninDmitriy/fluidd
path: ~/fluidd

[update_manager KlipperScreen]
type: git_repo
path: ~/KlipperScreen
env: ~/.KlipperScreen-env/bin/python
origin: https://github.com/ShohninDmitriy/KlipperScreen.git
requirements: scripts/KlipperScreen-requirements.txt
venv_args: -p python3
install_script: scripts/KlipperScreen-install.sh
managed_services: KlipperScreen

[update_manager klipper-config]
type: git_repo
primary_branch: core_xy_no_clamber
path: ~/klipper_config
origin: https://github.com/ShohninDmitriy/klipper_config.git
managed_services: klipper
#[update_manager client klipper-config]
#type: git_repo
#path: ~/klipper_config
#origin: https://github.com/ShohninDmitriy/klipper_config.git
#primary_branch:core_xy_no_clamber
#is_system_service: False

[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/ShohninDmitriy/moonraker-timelapse.git
is_system_service: False

[power psu]
type: gpio
pin: !gpio21
initial_state: on
bound_service: klipper
locked_while_printing: True

[power pi]
type: gpio
pin: !gpio20
initial_state: on
off_when_shutdown: False
locked_while_printing: True

[timelapse]
output_path: ~/timelapse/
frame_path: /tmp/timelapse/
ffmpeg_binary_path: /usr/bin/ffmpeg
#enabled: True
#mode: layermacro
snapshoturl: http://192.168.0.26/capture
#gcode_verbose: True
#parkhead: False
#parkpos: back_left
#park_custom_pos_x: 0.0
#park_custom_pos_y: 0.0
#park_custom_pos_dz: 0.0
#park_travel_speed: 100
#park_retract_speed: 15
#park_extrude_speed: 15
#park_retract_distance: 1.0
#park_extrude_distance: 1.0
#hyperlapse_cycle: 30
#autorender: True
#constant_rate_factor: 23
#output_framerate: 25
#pixelformat: yuv420p
#time_format_code: %Y%m%d_%H%M
#extraoutputparams: -filter_complex "[0]trim=0:3[hold];[0][hold]concat[extended];[extended][0]overlay"
# здесь вы можете добавить выходные параметры в FFMPEG дополнительную
# информацию: https://ffmpeg.org/ffmpeg.html например, поворот видео на 180°
# "-vf transpose=2,transpose=2" или повторите последний кадр в течение 5 секунд:
# -filter_complex "[0]trim=0:5[hold];[0][hold]concat[extended];[extended][0]overlay"
#variable_fps: False
#targetlength: 10
#variable_fps_min: 5
#variable_fps_max: 60
#flip_x: False
#flip_y: False
#duplicatelastframe: 20
#previewimage: True
#saveframes: False
