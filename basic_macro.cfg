#####################################################################
# 	Macro
#####################################################################
#
# Этот раздел содержит основные макросы, необходимые в нескольких других
# файлах. Объединение их всех в одном месте должно помочь использовать
# только то, что необходимо, без поиска нескольких других файлов.
#
# Все слышимое каким-то образом относится к выходу на экран или консоль
#
#####################################################################
## Очистить вывод на дисплей после продолжительности в секундах
## Использование: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Сброс SD-файла после Print_END или CANCEL_PRINT
## Это позволит избежать возможности перепечатки в Mainsail после завершения печати
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE
  
## action_respond_info всегда будет выполняться при завершении оценки макрокоманды.
## Используйте _PRINT_AR, если вам нужен порядок нескольких выходов консоли в порядке,
## указанном макросом
## Использование: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  #####  установите значения по умолчанию  #####
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}

##  print runout sensor information in any case even is no
##  runout is specified
[gcode_macro _RUNOUT_INFO]
description: Helper: Print runout sensor status
gcode:
  #############  Получить задействованное оборудование  #############
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  #############  Генерировать выходные переменные  #############
  {% if ena_runout == 'switch' %}
    {% set enabled = printer['filament_switch_sensor runout'].enabled|lower %}
    {% set sensor = 'Switch Sensor' %}
    {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
      {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
    {% elif 'virtual_sdcard' in printer and filament_loaded in printer.save_variables.variables %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = 'unknown' %}
    {% endif %}
  {% elif ena_runout == 'file' %}
    {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% set enabled = 'false' %}
    {% set sensor = 'Stored in file' %}
  {% else %}
    {% set filament_detected = 'unknown' %}
    {% set enabled = 'false' %}
    {% set sensor = 'Not monitored' %}
  {% endif %}
  #############  конец определения  #############
  {action_respond_info("RUNOUT: %s
                        Enabled: %s
                        Detect Filament: %s" % (sensor, enabled|lower,filament_detected|lower))}

##  добавляет информацию о версии mcu в M115
[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  M115.1
