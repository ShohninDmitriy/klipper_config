#####################################################################
#  Macros
#####################################################################
[gcode_macro SECURE_ATTACH_PROBE]
description: Attaching the MagProbe if not already attached
gcode:
  _MAG_PROBE ACTION=ATTACH
  _MAG_PROBE ACTION=CHECK_ATTACH

[gcode_macro SECURE_DOCK_PROBE]
description: Dock the MagProbe if not already docked
gcode:
  _MAG_PROBE ACTION=DOCK
  _MAG_PROBE ACTION=CHECK_DOCK

# QUERY_PROBE must run direct before _PROBE_ACTION
# that relation is insured by the caller id
[gcode_macro _MAG_PROBE]
description: Helper: Query MagProbe state and performe action
variable_state: 'unknown'
variable_id: 0
gcode:
  # generate an id not equal to 0
  # id 0 is reserved for invalid
  {% if id == 0 %}
    {% set id = 1 %}
  {% else %}
    {% set id = id + 1 %}
  {% endif %}
  QUERY_PROBE ID={id}
  _PROBE_ACTION ACTION={params.ACTION} ID={id}
  SET_GCODE_VARIABLE MACRO=_MAG_PROBE VARIABLE=id VALUE={id}
  M400

[gcode_macro _PROBE_ACTION]
description: Helper: Performe MagProbe action
gcode:
  ##### get params and defaults #####
  {% set action = params.ACTION|lower %}
  {% set id = params.ID|default(0)|int%} ; call id 0 means invalid
  ##### get probe variables #####
  {% set probe_id = printer['gcode_macro QUERY_PROBE'].id|default(0)|int %}
  ##### end of definition
  {% if id == 0 or id != probe_id %}
    {action_raise_error("MagProbe: Call ID invalid or does not match QUERY_PROBE call ID")}
  {% elif printer.probe.last_query|lower == 'false' %}
    {action_raise_error("MagProbe: Please execute QUERY_PROBE first")}
  {% else %}
    {% if printer.probe.last_query|int == 0 %}
      {% set state = 'attached' %}
    {% else %}
      {% set state = 'docked' %}
    {% endif %}
  {% endif %}
  ##### end of defines #####
  SET_GCODE_VARIABLE MACRO=_MAG_PROBE VARIABLE=state VALUE='"{state}"'
  {% if action == 'attach' %}
    {% if state == 'docked' %}
      _ATTACH_PROBE
    {% else %}
      {action_respond_info("MagProbe: already attached")}
    {% endif %}
  {% elif action == 'dock' %}
    {% if state == 'attached' %}
      _DOCK_PROBE
    {% else %}
      {action_respond_info("MagProbe: already docked")}
    {% endif %}
  {% elif action == 'check_dock' %}
    {% if state != 'docked' %}
      {action_raise_error("MagProbe: dock failed!")}
    {% endif %}
  {% elif action == 'check_attach' %}
    {% if state != 'attached' %}
      {action_raise_error("MagProbe: attach failed!")}
    {% endif %}
  {% else %}
    {action_raise_error("MagProbe: action not defined")}
  {% endif %}

## used probe: klicky probe
## the probe is mounted at the moving gantry -> therefor no Z move needed
##
## Attach:
## 1) Prepare Dock: X(probe_undock_x) Y(probe_undock_y) -> next to the probe dock
## 2) Dock Probe  : X(probe_dock_x)                     -> dock the probe
## 3) Finisch Dock: Y(probe_dock_y)                     -> move probe out of holder
##
## Dock:
## 1) Prepare UnDock: X(probe_dock_x) Y(probe_dock_y) -> infront of  probe dock
## 2) UnDock Probe  : Y(probe_undock_y)               -> get probe into dock
## 3) Finisch UnDock: X(probe_undock_x)               -> move probe out of holder
##
[gcode_macro _ATTACH_PROBE]
description: Helper: Attach MagProbe
gcode:
  ##### Get user defines #####
  {% set dock_x = printer["gcode_macro _USER_VARIABLE"].probe_dock_x %}
  {% set dock_y = printer["gcode_macro _USER_VARIABLE"].probe_dock_y %}
  {% set undock_x = printer["gcode_macro _USER_VARIABLE"].probe_undock_x %}
  {% set undock_y = printer["gcode_macro _USER_VARIABLE"].probe_undock_y %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  {% set d_speed = printer['gcode_macro _USER_VARIABLE'].probe_dock_speed|float * 60 %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  {action_respond_info("MagProbe: Attach Probe")}
  SAVE_GCODE_STATE NAME=STATE_ATTACH_PROBE
  G90                                   ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900                    ; move head up
  {% endif %}
  G0 X{undock_x} Y{undock_y} F{t_speed} ; move next to mag-probe
  G0 X{dock_x} F{d_speed}               ; move sidewards to attach probe
  G0 Y{dock_y} F{d_speed}               ; move out of holder
  RESTORE_GCODE_STATE NAME=STATE_ATTACH_PROBE

[gcode_macro _DOCK_PROBE]
description: Helper: Dock MagProbe
gcode:
  ##### Get user defines #####
  {% set dock_x = printer["gcode_macro _USER_VARIABLE"].probe_dock_x %}
  {% set dock_y = printer["gcode_macro _USER_VARIABLE"].probe_dock_y %}
  {% set undock_x = printer["gcode_macro _USER_VARIABLE"].probe_undock_x %}
  {% set undock_y = printer["gcode_macro _USER_VARIABLE"].probe_undock_y %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  {% set d_speed = printer['gcode_macro _USER_VARIABLE'].probe_dock_speed|float * 60 %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  {action_respond_info("MagProbe: Dock Probe")}
  SAVE_GCODE_STATE NAME=STATE_DOCK_PROBE
  G90                               ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900                ; move head up
  {% endif %}
  G0 X{dock_x} Y{dock_y} F{t_speed} ; move infront of mag-probe
  G0 Y{undock_y} F{d_speed}         ; move into the holder
  G0 X{undock_x} F{d_speed}         ; move sidewards to remove probe
  RESTORE_GCODE_STATE NAME=STATE_DOCK_PROBE

#####################################################################
#   Customized standard macros
#####################################################################
#  QUAD_GANTRY_LEVEL can be found in probe_qgl.cfg 
#  BED_MESH_CALIBRATE can be found in bed_mesh.cfg
#####################################################################
#
#        !!! Caution !!!
#
# PROBE_CALIBRATE can not dock the Magprobe automaticly, as it 
# start's a scripting process we need to stop at the execution 
# of the base macro. Use 
#  - PROBE_ABORT
#  - PROBE_ACCEPT
# instead of the orignal ABORT and ACCEPT to also dock the probe
#
#####################################################################
[gcode_macro QUERY_PROBE]
description: Return the status of the z-probe and store ID
rename_existing: QUERY_PROBE_BASE
variable_id: 0
gcode:
  {% set id = params.ID|default(0) %} ; call id 0 menas invalid
  QUERY_PROBE_BASE
  SET_GCODE_VARIABLE MACRO=QUERY_PROBE VARIABLE=id VALUE={id}

[gcode_macro PROBE_ACCURACY]
description: Probe Z-height accuracy at current XY position and dock/undock MagProbe
rename_existing: PROBE_ACCURACY_BASE
gcode:
  #####  get new parameter. #####
  {% set dock = params.DOCK|default(1)|int %} ; use DOCK=0 to omit the probe docking
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get user defines  #####
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_hop
  G90 ; absolute positioning
  {% if ena_mag_probe == 'true' and act_z < z_hop %}
    {action_respond_info("PROBE_ACCURACY: High must be above %.2f" % z_hop)}
    G1 Z{z_hop} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleard first
  SAVE_GCODE_STATE NAME=STATE_PROBE_ACCURACY
  {% if ena_mag_probe == 'true' %} 
    SECURE_ATTACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_ACCURACY MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  PROBE_ACCURACY_BASE {get_params|join(" ")}
  {% if ena_mag_probe == 'true' and dock == 1 %}
    SECURE_DOCK_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_ACCURACY MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  {% if absolute_coordinates == 'false' %} G91 {% endif %}
  
[gcode_macro PROBE]
description: Probe Z-height at current XY position and dock/undock MagProbe
rename_existing: PROBE_BASE
gcode:
  #####  get new parameter. #####
  {% set dock = params.DOCK|default(1)|int %} ; use DOCK=0 to omit the probe docking
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get user defines  #####
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_hop
  G90 ; absolute positioning
  {% if ena_mag_probe == 'true' and act_z < z_hop %}
    {action_respond_info("PROBE: High must be above %.2f" % z_hop)}
    G1 Z{z_hop} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleard first
  SAVE_GCODE_STATE NAME=STATE_PROBE
  {% if ena_mag_probe == 'true' %} 
    SECURE_ATTACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  PROBE_BASE {get_params|join(" ")}
  G1 Z{z_hop} F900 ; move head up to remove trigger
  {% if ena_mag_probe == 'true' and dock == 1 %}
    SECURE_DOCK_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  {% if absolute_coordinates == 'false' %} G91 {% endif %}
  
[gcode_macro PROBE_CALIBRATE]
description: Calibrate the probe's z_offset and undock MagProbe
rename_existing: PROBE_CALIBRATE_BASE
gcode:
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get user defines  #####
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop|float %}
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  ##### get toolhead parameters #####
  {% set act_z = printer.gcode_move.gcode_position.z|float %}
  {% set absolute_coordinates = printer.gcode_move.absolute_coordinates|lower %}
  ##### get params and prepare to send them to the base macro #####
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  ##### end of definitions #####
  # as we need to return to the position with the probe we need to be at least at z_hop
  G90 ; absolute positioning
  {% if ena_mag_probe == 'true' and act_z < z_hop %}
    {action_respond_info("PROBE_CALIBRATE: High must be above %.2f" % z_hop)}
    G1 Z{z_hop} F900 ; move head up
  {% endif %}
  M400 ; get the buffer cleard first
  SAVE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE
  {% if ena_mag_probe == 'true' %} 
    SECURE_ATTACH_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"calib"'
  SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=absolute_coordinates VALUE='"{absolute_coordinates}"'
  PROBE_CALIBRATE_BASE {get_params|join(" ")}

[gcode_macro PROBE_ABORT]
description: Abort manual Z probing tool for Probe and dock MagProbe
variable_caller: 'unknown'
variable_absolute_coordinates: False
gcode:
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get user defines  #####
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  ##### end of definitions #####
  {% if ena_mag_probe == 'true' and caller|lower|string == 'calib' %}
    ABORT
    SECURE_DOCK_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
    {% if absolute_coordinates == 'false' %} G91 {% endif %}
      SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"unknown"'
  {% else %}
    {action_respond_info("PROBE_ABORT: Executed while PROBE_CALIBRATE is not running")}
  {% endif %}

[gcode_macro PROBE_ACCEPT]
description: Accept the current Z position for Probe and dock MagProbe
gcode:
  #####  get variables from ABORT  #####
  {% set caller = printer['gcode_macro PROBE_ABORT'].caller %}
  {% set absolute_coordinates = printer['gcode_macro PROBE_ABORT'].absolute_coordinates %}
  #####  get hardware enables  #####
  {% set ena_mag_probe = printer['gcode_macro _USER_VARIABLE'].mag_probe|lower %}
  ##### get user defines  #####
  {% set t_speed = printer["gcode_macro _USER_VARIABLE"].probe_travel_speed|float * 60 %}
  ##### end of definitions #####
  {% if ena_mag_probe == 'true' and caller|lower|string == 'calib' %}
    ACCEPT
    SECURE_DOCK_PROBE
    RESTORE_GCODE_STATE NAME=STATE_PROBE_CALIBRATE MOVE=1 MOVE_SPEED={t_speed}
    {% if absolute_coordinates == 'false' %} G91 {% endif %}
      SET_GCODE_VARIABLE MACRO=PROBE_ABORT VARIABLE=caller VALUE='"unknown"'
  {% else %}
    {action_respond_info("PROBE_ACCEPT: Executed while PROBE_CALIBRATE is not running")}
  {% endif %}