#  SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
#  SET_RETRACTION is commonly set as part of slicer per-filament configuration, as different filaments require different
#  parameter settings.
#  GET_RETRACTION Queries the current parameters used by firmware retraction and displays them on 
[firmware_retraction]
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated
retract_length: 0.75
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_extra_length: 0
retract_speed: 70
unretract_speed: 40

#####################################################################
# 	Macro
#####################################################################
[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  # set default parameter value
  {% set wait = params.WAIT|default(0) %}
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Ball up the filament tip
  G92 E0       ; zero the extruder
  M82          ; absolute extrusion
  G1 E2 F3600
  G1 E0 F3600
  G1 E4 F3600
  G1 E0 F3600
  G1 E8 F3600
  G1 E0 F3600
  M83          ; relative extrusion
  G1 E-25 F3600
  G4 P{wait|int * 1000}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 30 %}
  {% set extruder_target = printer.extruder.target %}
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    ## Move to waste bin
    _CG28                 ; home if not already homed
    G90                   ; absolute positioning
    G0 X55 Y352 Z30 F9000 ; park nozzle at brush bin
     _LCD_KNOB COLOR=BLUE
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    _LCD_KNOB COLOR=RESTORE
    M83                   ; set extruder to relative
    G1 E90 F1800          ; quickly load 90mm filament
    G1 E50 F300           ; slower extrusion for hotend path
    G1 E-2 F1500          ; retract 
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    # clean nozzle
    _WIPE
    G0 Z30 F1800
    G0 X55 Y352 F9000 ; park nozzle at brush bin
    # restore old extruder temperature
    M109 S{extruder_target}
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
    _PRINT_AR T="Filament loaded"
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}
 
[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable rounout while running
gcode:
  # variable for the unload distance
  {% set dist = 75 %}
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 30 %}
  {% set extruder_target = printer.extruder.target %}
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    _LCD_KNOB COLOR=BLUE
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    # Ball up the filament tip and retract out past the extruder gears
    _LCD_KNOB COLOR=RESTORE
    _FILAMENT_BALL WAIT=3
    M83 ; Relative extrusion
    G1 E{dist|float * -1} F3000
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # restore old extruder temperature
    M109 S{extruder_target}
    _PRINT_AR T="Filament unloaded"
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}

## purge and clean the nozzle in prep for printing    
[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + 30 %}
  {% set extruder_target = printer.extruder.target %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                  ; home if not already homed
  G90                    ; absolute positioning
  G1 X35 Y352 Z10 F9000  ; move to purge bucket location
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
  {% endif %}
  G1 Z2.5 F900  ; lower Z
  G92 E0        ; reset Extruder
  M83           ; relative extrusion
  G1 E5.00 F500 ; purge filament (5mm)
  G1 E5.00 F800 ; purge filament (5mm)
  G1 E-0.5 F800 ; retract filament (0.5)
  G4 P500
  _WIPE
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
description: Helper: Wipe nozzle at bucket
gcode:
  G90 ; absolute positioning
  # move to wiper start pos
  G0 X80.00 Y355 Z1.5 F3000
  # move head diagonal to brush
  {% for wipe in range(5) %}
    {% for coordinate in [(120,350),(80,350)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 1.0 * wipe} F{6000 + 1000 * wipe}
    {% endfor %}
  {% endfor %}
  G0 X120 Y355 F18000
    
[gcode_macro PRIME_LINE]
description: Purge nozzle front left
gcode:
  # define values for easiermodification
  {% set seg = 11 %}
  {% set lenght = 220 %}
  {% set extrude = 22 %}
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # calculate values of each segment
  {% set y_seg = lenght|float / seg|float %}
  {% set e_seg = extrude|float / seg|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                  ; home if not already homed
  G92 E0                                 ; reset Extruder
  G90                                    ; absolute positioning
  G1 X5 Y30 Z5 F10000                    ; move to start position
  G1 Z0.24 F900                          ; move Z Axis down
  M83                                    ; relative extrusion
  G91                                    ; relative positioning
  {% for segment in range(seg|int-1) %}  ; draw the first line
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4                                ; move to side
  {% for segment in range(seg|int-1) %}  ; draw the second line
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G1 Z5.0 F1500                          ; move Z Axis up
  G92 E0                                 ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro SELECT_PA]
description: Set PA depending on nozzle and filament 
gcode:
  # set default parameter values
  {% set nozzle = params.NOZZLE|default(0.4)|float %}
  {% set filament = params.FILAMENT|default('None')|string %}
  #####   Pressure Advance values for different filaments & nozzles #####
  {% set pa_def = [('ESUN_ABS+_Black', 0.4, 0.05),
                   ('KVP_ABS_FL_Blue', 0.4, 0.05)] %}
  #######################################################################
  {% set elem_cnt = pa_def|length %}
  {% set ns = namespace(index = elem_cnt) %}
  {% for index in range(elem_cnt) %}
     {% if pa_def[index][0]|lower == filament|lower and pa_def[index][1]|float == nozzle %}
       {% set ns.index = index %}
    {% endif %}
  {% endfor %}
  {% if ns.index < elem_cnt %}
    {% set elem_filament = pa_def[ns.index][0]|string %}
    {% set elem_nozzle = pa_def[ns.index][1]|float %}
    {% set elem_pa = pa_def[ns.index][2]|float %}
  {% else %}
    {% set elem_filament = 'default' %}
    {% set elem_nozzle = 0.4 %}
    {% set elem_pa =  printer.configfile.settings['extruder'].pressure_advance|float %}
  {% endif %}
  SET_PRESSURE_ADVANCE ADVANCE={elem_pa}
  {action_respond_info("PRESSURE_ADVANCE:
                        FILAMENT: %s
                        NOZZLE: %1.1f
                        VALUE: %.4f" % (elem_filament, elem_nozzle, elem_pa))}