[firmware_retraction]
retract_length: 0.9
unretract_extra_length: 0
retract_speed: 70
unretract_speed: 40

#####################################################################
# 	Macro
#####################################################################
[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  ##### set default parameter value #####
  {% set wait = params.WAIT|default(0) %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Сверните кончик нити
  # обнулить экструдер
  G92 E0
  # абсолютная экструзия
  M82
  G1 E1 F120  ;2
  G1 E0 F3600
  G1 E3 F120  ;4
  G1 E0 F3600
  G1 E6 F120  ;8
  G1 E0 F3600
  # относительная экструзия
  M83
  G1 E-25 F3600
  G4 P{wait|int * 100}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set load = printer["gcode_macro _USER_VARIABLE"].load_distance %}
  {% set extrude = printer["gcode_macro _USER_VARIABLE"].load_extrude %}
  {% set retreact = printer["gcode_macro _USER_VARIABLE"].retreact_end|float * -1 %}
  {% set purge_x = printer["gcode_macro _USER_VARIABLE"].purge_x %}
  {% set purge_y = printer["gcode_macro _USER_VARIABLE"].purge_y %}
  {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop %}
  {% set z_min_delta = printer["gcode_macro _USER_VARIABLE"].z_min_delta %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    ## Move to waste bin
    _CG28                        ; home if not already homed
    G90                          ; absolute positioning
    {% if act_z < z_hop %}
    G1 Z{z_hop} F900             ; move head to minimum
    {% endif %}
    G1 X{purge_x} Y{purge_y} F15000 ; move to purge bucket location
     _LCD_KNOB COLOR=BLUE
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      G1 Z{z_min_delta} F1800 
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    _LCD_KNOB COLOR=RESTORE
    M83                  ; set extruder to relative
    G1 E{load} F1800     ; quickly load 90mm filament
    G1 E{extrude} F120   ; slower extrusion for hotend path
    G1 E{retreact} F1500 ; retract 
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    # очистка сопла
    _WIPE
    G1 Z{act_z} F1800        
    G1 X{purge_x} Y{purge_y} F15000 ; move to purge bucket location
    # restore old extruder temperature
    M109 S{extruder_target}
    M104 S{extruder_target}
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
    _PRINT_AR T="Filament loaded"
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}
 
[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set unload = printer["gcode_macro _USER_VARIABLE"].unload_distance %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    _LCD_KNOB COLOR=BLUE
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    # Сверните кончик нити и втяните его за шестерни экструдера.
    _LCD_KNOB COLOR=RESTORE
    _FILAMENT_BALL WAIT=3
    M83 ; Relative extrusion
    G1 E-{unload} F3000
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # восстановить предыдущую температуру экструдера
    M109 S{extruder_target}
    M104 S{extruder_target}
    _PRINT_AR T="Filament unloaded"
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %} 

## продуть и очистить сопло перед печатью       
[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
variable_brush_coordinate: [(0,5),(0,50)]
variable_brush_offset: 1
gcode:
  ##### get user defines #####
  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set purge_x = printer["gcode_macro _USER_VARIABLE"].purge_x %}
  {% set purge_y = printer["gcode_macro _USER_VARIABLE"].purge_y %}
  {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                          ; home if not already homed
  G90                            ; absolute positioning
  {% if act_z < z_hop %}
    G1 Z{z_hop} F900            ; move head up
  {% endif %}
  G1 X{purge_x} Y{purge_y} F9000 ; move to purge bucket location
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      M109 S{minTemp} ; heat extruder and wait
  {% endif %}
  G92 E0              ; reset Extruder
  M83                 ; relative extrusion
  G1 E5.00 F200       ; purge filament (5mm)
  G1 E5.00 F200       ; purge filament (5mm)
  G1 E-0.5 F1800      ; retract filament (0.5)
  G4 P500
  _WIPE
  # восстановить предыдущую температуру экструдера
  M109 S{extruder_target}
  M104 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  ##### get user defines #####
  {% set wipe_cnt = printer["gcode_macro _USER_VARIABLE"].brush_wipe_cnt|int %}
  {% set brush_offset = printer["gcode_macro _USER_VARIABLE"].brush_wipe_offset|float %}
  {% set brush_coordinate = printer["gcode_macro _USER_VARIABLE"].brush_coordinate %}
  G92 E0
  G0 X35 Y8 Z0.5 F15000
  G92 E0
  G1 E5 F120
  G92 E0
  G1 E-0.5 F2400
  G92 E0
  G4 P500
  G0 X35 Y13 Z6.5 F15000

 # ##### end of definitions #####
 # G90 ; absolute positioning
 # # move to wiper start pos
 # G0 X{brush_coordinate[1][0]} Y{brush_coordinate[1][1]} F4000
 # # move head diagonal to brush
 # {% for wipe in range(0, wipe_cnt) %}
 #   {% for coordinate in brush_coordinate %}
 #     G0 X{coordinate[0]} Y{coordinate[1] + brush_offset * wipe} F4000
 #   {% endfor %}
 # {% endfor %}
 # # move to wiper end pos (near to Z endstop)
 # G0 X{brush_coordinate[0][0]} Y{brush_coordinate[0][1]} F4000
    
[gcode_macro PRIME_LINE]
gcode:
  ##### define values for easier modification #####
  {% set seg = 11 %}
  {% set lenght = 220 %}
  {% set extrude_per_seg = 2 %}
  ##### calculate values of each segment #####
  {% set y_seg = lenght|float / seg|float %}
  {% set e_seg = extrude_per_seg %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                  ; home if not already homed
  G92 E0                                 ; reset Extruder
  G90                                    ; absolute positioning
  G1 X35 Y30 Z1 F15000                   ; move to start position
  G1 Z0.24 F900                          ; move Z Axis down
  M83                                    ; relative extrusion
  G91                                    ; relative positioning
  {% for segment in range(seg|int-1) %}  ; draw the first line
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G0 X0.42                               ; move to side
  {% for segment in range(seg|int-1) %}  ; draw the second line
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G92 E0
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

[gcode_macro SELECT_PA]
description: Set PA depending on nozzle and filament 
gcode:
  ##### set default parameter values #####
  {% set nozzle = params.NOZZLE|default(0.4)|float %}
  {% set filament = params.FILAMENT|default('None')|string %}
  #####   Pressure Advance values for different filaments & nozzles #####
  {% set pa_def = [('ABS', 0.4, 0.0525),
                   ('NYLON', 0.4, 0.0725),
                   ('PETG', 0.4, 0.07)] %}
  #######################################################################
  {% set elem_cnt = pa_def|length %}
  {% set ns = namespace(index = elem_cnt) %}
  {% for index in range(elem_cnt) %}
     {% if pa_def[index][0]|lower == filament|lower and pa_def[index][1]|float == nozzle %}
       {% set ns.index = index %}
    {% endif %}
  {% endfor %}
  {% if ns.index < elem_cnt %}
    {% set elem_filament = pa_def[ns.index][0]|string %}
    {% set elem_nozzle = pa_def[ns.index][1]|float %}
    {% set elem_pa = pa_def[ns.index][2]|float %}
  {% else %}
    {% set elem_filament = 'default' %}
    {% set elem_nozzle = 0.4 %}
    {% set elem_pa =  printer.configfile.settings['extruder'].pressure_advance|float %}
  {% endif %}
  ##### end of definitions #####
  SET_PRESSURE_ADVANCE ADVANCE={elem_pa}
  {action_respond_info("PRESSURE_ADVANCE:
                        FILAMENT: %s
                        NOZZLE: %1.1f
                        VALUE: %.4f" % (elem_filament, elem_nozzle, elem_pa))}