## Bigtreetech Octopus V1.1 TMC2209 UART config 
## MKS SGEN_L 2.0 TMC2209 UART config
## Bigtreetech SKR mini 1.1
##

#  Пины платы

#[include pinouts.d/mks_sgen_l_2_pins.cfg]
[include pinouts.d/btt_octopus_pin.cfg]


#  MCU definition

[mcu]
##-------------------------------------------------------------------
serial:/dev/serial/by-id/usb-Klipper_stm32f446xx_10011-if00
#serial:/dev/serial/by-id/usb-Klipper_lpc1769_10011-if00
restart_method: command
##-------------------------------------------------------------------
## MCU для акселерометра adxl345
[mcu STM]
##-------------------------------------------------------------------
serial:/dev/serial/by-id/usb-Klipper_stm32f103xe_10012-if00
restart_method: command
##-------------------------------------------------------------------
#[mcu SMUFF]
##-------------------------------------------------------------------
#serial:/dev/serial/by-id/usb-Klipper_stm32f103xe_10033-if00
#restart_method: command
##-------------------------------------------------------------------


#  Общее определение принтера

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3500
max_accel_to_decel: 3000
max_z_velocity: 7  # can increase if needed
max_z_accel: 250   # Max 
square_corner_velocity: 7

#  Stepper Settings
[include stepper.cfg]
[include tmc.cfg]

#  Extruder & Bed; Heater Verification (default values)
[include heater.cfg]

#  Probe and Gantry Adjustment Routines
[include probe.cfg]

#  Fan Control & Extra Thermistor
[include fan.cfg]

#  Caselight Control
[include caselight.cfg]

#  Homing Routines
[include homing.cfg]

#  Bed Mesh 
[include bed_mesh.cfg]

#  Resonance compensation
[include input_shaper.cfg]

#   Display & Custom Menu
[include lcd.cfg]
[include display_menu.cfg]

#  Macros
[include basic_macro.cfg]
[include macro.cfg]
[include park_macro.cfg]
[include debug_macro.cfg]

#  moonraker/mainsail
[include webclient.cfg]

# Power relays
[include power.cfg]

#  print and service time storage
[include printtime.cfg]

#  flexplate select menu
[include flexplate.cfg]

#  filament and pressure advance
[include filament.cfg]
[include pressure_advance.cfg]

#  filament runout sensor
[include runout.cfg]

#  force move used only if gantry is at z max
[include force_move.cfg]

#  timelaps needs <https://github.com/mainsail-crew/moonraker-timelapse.git>
[include timelapse.cfg]

#  Enable Execute Object (beta) use https://github.com/troy-jacobson/klipper/tree/exclude-object-pr
#[exclude_object]

#  File location of stored varibales
[save_variables]
filename: /home/pi/klipper_config/.variables.stb

#  Virtual SD Card
[virtual_sdcard]
path: /home/pi/gcode_files

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE
  _CHECK_CONSITENT
  _EXECUTE_AT_INIT

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if printer.save_variables.variables.filament_sensor %} _RESTORE_FILAMENT_SENSOR {% endif %}
  {% if user.hw.filter.ena %} _CHECK_FILTER {% endif %}
  {% if user.hw.relay,ena %} _HEATER_ON {% endif %}
  {% if user.hw.display.ena %} UPDATE_DELAYED_GCODE ID=_DISPLAY_INIT DURATION=2 {% endif %}
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 0
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: True
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
  ###################################################################
  ##           start of user defines
  ## this needs to be changed for your printer
  ###################################################################
  {% set user_z_endstop_xy = [44.3,104.4] %}   ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 3.0 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.55 %}         ; reduced homing curent for z
  {% set user_home_accel = 600 %}              ; reduced ACCEL for homing
  {% set user_print_accel = 2500 %}            ; reduced ACCEL for printing
  {% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 5 %}               ; default z_hop speed
  {% set user_retract_speed = 5 %}             ; default retract/extrude speed
  {% set user_travel_speed = 300 %}            ; travel speed e.g park, dock ...
  {% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 40 %}      ; load/unload speed
  {% set user_wipe_speed = 60 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  
  ##### Park Position #####
  {% set user_park_xy_delta = 10 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 10 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 3 %}                ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 50 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 125 %}           ; load distance while load filament
  {% set user_load_extrude = 25 %}             ; extrude distance while load filament
  {% set user_unload_distance = 150 %}         ; unload distance while unload filament
  {% set user_retract_end = 6 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 8 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  {% set user_brush_pos = 'right' %}           ; left/right profile used
  #{% set user__brush_x_middle = 100 %}        ; mid point of brush at left profile
  {% set user_brush_x_middle = -28.5 %}        ; mid point of brush at right profil
  {% set user_brush_x_width = 9 %}             ; width of brush
  {% set user_brush_y_start = 120 %}           ; start point at y
  {% set user_wipe_z = 1.0 %}                  ; z for wipe moves
  {% set user_wipe_cnt = 5 %}                  ; number of full wipes
  {% set user_z_purge = 2.5 %}                 ; z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  {% set user_prime_start_xy = [2.0,30.0] %}   ; x&y start coordinates of prime line
  {% set user_prime_z = 0.25 %}                ; default prime layer hight
  {% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  {% set user_prime_lenght = 220 %}            ; length of prime line
  {% set user_prime_seg = 8 %}                 ; segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### Peripheral #####
  {% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  {% set user_caselight_on = 0.6 %}            ; caselight on value
  ###################################################################
  ##                   end of user defines
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_probe_z_offset   = printer.configfile.settings.probe.z_offset|default(0.0)|float %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings 
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                         else 'none'},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}}%}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type != 'switch' or hw_dic.runout.type != 'motion'
                                             else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y} %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0], 
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x, 
                                       'y'    : user_probe_dock_pos[1]},
                      'home_offset' : cfg_probe_z_offset if cfg_probe_z_offset > 0 else user_probe_home_offset} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'         : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True
  M204 S2750
# extruder 23.256 1.127 61.338; bed 75 2.256 350

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 23.256
#*# pid_ki = 1.127
#*# pid_kd = 61.338
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 90
#*# pid_ki = 2.056
#*# pid_kd = 250
#*#
#*# [bed_mesh ABS-Bed_Temp-107C]
#*# version = 1
#*# points =
#*# 	0.277500, 0.220625, 0.177500, 0.128125, 0.089375, 0.060625, 0.046250, 0.030000, 0.020625, 0.020625, 0.030000, 0.047500, 0.068750, 0.090625, 0.118750, 0.148125, 0.185625, 0.226250, 0.269375, 0.320000, 0.370000, 0.420625, 0.475625
#*# 	0.238750, 0.191250, 0.147500, 0.108750, 0.070625, 0.048125, 0.028125, 0.018125, 0.009375, 0.010000, 0.018750, 0.035625, 0.055625, 0.078125, 0.101250, 0.130000, 0.168125, 0.206875, 0.249375, 0.296875, 0.346250, 0.395625, 0.446250
#*# 	0.219375, 0.170000, 0.129375, 0.088125, 0.058125, 0.028750, 0.008750, -0.004375, -0.011250, -0.010625, -0.001875, 0.008750, 0.027500, 0.049375, 0.076250, 0.105000, 0.136875, 0.176250, 0.216875, 0.261250, 0.308125, 0.358125, 0.406875
#*# 	0.207500, 0.160625, 0.119375, 0.087500, 0.050000, 0.028125, 0.005625, -0.009375, -0.013750, -0.011875, -0.004375, 0.005000, 0.019375, 0.039375, 0.065000, 0.089375, 0.125000, 0.159375, 0.200625, 0.245000, 0.291250, 0.337500, 0.378125
#*# 	0.220625, 0.148125, 0.109375, 0.070000, 0.040000, 0.010000, -0.009375, -0.023125, -0.030625, -0.030625, -0.021875, -0.013125, 0.000000, 0.020000, 0.046250, 0.070625, 0.101250, 0.140000, 0.178750, 0.220000, 0.260625, 0.308125, 0.350625
#*# 	0.189375, 0.148750, 0.107500, 0.070000, 0.038125, 0.011250, -0.011875, -0.023125, -0.033750, -0.033125, -0.030625, -0.020625, -0.009375, 0.010000, 0.030625, 0.056875, 0.088125, 0.121250, 0.160625, 0.199375, 0.239375, 0.279375, 0.326250
#*# 	0.180000, 0.138125, 0.100000, 0.058750, 0.028125, -0.002500, -0.023125, -0.041250, -0.050000, -0.052500, -0.049375, -0.040625, -0.024375, -0.008750, 0.016250, 0.039375, 0.068125, 0.101250, 0.138125, 0.176875, 0.216875, 0.256250, 0.298125
#*# 	0.169375, 0.145625, 0.102500, 0.067500, 0.028750, 0.000000, -0.024375, -0.040625, -0.051875, -0.054375, -0.052500, -0.043750, -0.031875, -0.013750, 0.006875, 0.027500, 0.056250, 0.089375, 0.125000, 0.160000, 0.196250, 0.234375, 0.275625
#*# 	0.142500, 0.140000, 0.106875, 0.061250, 0.027500, -0.010000, -0.031250, -0.051875, -0.061250, -0.069375, -0.062500, -0.058750, -0.042500, -0.029375, -0.004375, 0.018750, 0.046250, 0.077500, 0.110000, 0.146250, 0.180000, 0.220000, 0.257500
#*# 	0.158750, 0.156250, 0.115625, 0.071250, 0.030000, -0.001875, -0.031875, -0.050625, -0.065000, -0.071250, -0.070625, -0.061250, -0.051250, -0.033750, -0.014375, 0.008750, 0.036250, 0.066250, 0.097500, 0.130625, 0.165000, 0.200000, 0.238750
#*# 	0.210000, 0.160000, 0.119375, 0.069375, 0.028125, -0.011250, -0.040000, -0.063750, -0.079375, -0.085000, -0.081875, -0.078750, -0.062500, -0.045625, -0.023750, -0.001875, 0.026875, 0.057500, 0.089375, 0.117500, 0.150000, 0.184375, 0.219375
#*# 	0.247500, 0.187500, 0.130000, 0.078750, 0.030000, -0.010000, -0.043125, -0.068750, -0.087500, -0.091875, -0.094375, -0.085000, -0.074375, -0.055000, -0.035000, -0.012500, 0.015000, 0.045000, 0.070625, 0.100625, 0.130000, 0.160625, 0.191250
#*# 	0.269375, 0.201250, 0.138750, 0.079375, 0.028125, -0.018750, -0.053125, -0.081875, -0.099375, -0.110000, -0.109375, -0.102500, -0.088125, -0.070000, -0.048125, -0.023750, 0.003750, 0.030000, 0.060000, 0.081250, 0.110000, 0.135625, 0.165625
#*# 	0.296875, 0.225625, 0.156250, 0.090625, 0.031875, -0.015000, -0.055625, -0.087500, -0.109375, -0.120000, -0.125000, -0.118750, -0.103750, -0.084375, -0.063750, -0.038750, -0.010000, 0.015625, 0.036875, 0.061250, 0.084375, 0.106250, 0.130625
#*# 	0.326875, 0.247500, 0.168750, 0.097500, 0.031250, -0.023125, -0.068750, -0.102500, -0.125000, -0.139375, -0.140000, -0.134375, -0.118750, -0.099375, -0.074375, -0.049375, -0.021250, 0.000000, 0.021250, 0.036250, 0.053750, 0.070000, 0.091875
#*# 	0.360000, 0.271875, 0.190000, 0.109375, 0.038125, -0.024375, -0.075000, -0.114375, -0.141250, -0.155000, -0.159375, -0.153125, -0.140000, -0.119375, -0.097500, -0.064375, -0.040000, -0.019375, -0.003750, 0.006250, 0.016875, 0.032500, 0.050000
#*# 	0.395625, 0.300625, 0.206250, 0.118125, 0.035000, -0.036250, -0.095000, -0.137500, -0.165000, -0.182500, -0.185000, -0.180625, -0.169375, -0.151875, -0.124375, -0.098125, -0.069375, -0.053125, -0.039375, -0.035000, -0.026875, -0.020000, 0.000000
#*# tension = 0.2
#*# min_x = 3.0
#*# algo = bicubic
#*# y_count = 17
#*# mesh_y_pps = 0
#*# min_y = 5.0
#*# x_count = 23
#*# max_y = 277.0
#*# mesh_x_pps = 0
#*# max_x = 340.92
#*#
#*# [bed_mesh ABS-Bed_Temp-0C]
#*# version = 1
#*# points =
#*# 	0.250000, 0.226875, 0.185625, 0.146250, 0.118750, 0.098125, 0.089375, 0.079375, 0.077500, 0.078750, 0.089375, 0.108125, 0.129375, 0.157500, 0.180000, 0.210625, 0.245625, 0.280000, 0.318750, 0.364375, 0.405000, 0.446875, 0.486875
#*# 	0.250000, 0.220000, 0.188125, 0.159375, 0.136250, 0.117500, 0.105000, 0.098125, 0.090625, 0.097500, 0.106875, 0.120000, 0.140000, 0.167500, 0.196250, 0.225625, 0.248125, 0.280000, 0.319375, 0.358750, 0.398750, 0.436875, 0.478125
#*# 	0.256875, 0.225000, 0.196250, 0.168125, 0.146875, 0.124375, 0.110000, 0.100000, 0.098750, 0.105000, 0.110625, 0.126250, 0.144375, 0.166250, 0.188750, 0.217500, 0.248125, 0.277500, 0.308750, 0.348125, 0.380000, 0.418750, 0.455625
#*# 	0.250625, 0.228125, 0.199375, 0.177500, 0.151250, 0.137500, 0.118750, 0.110000, 0.108125, 0.110000, 0.118750, 0.129375, 0.147500, 0.165000, 0.187500, 0.210000, 0.239375, 0.269375, 0.305625, 0.338125, 0.370000, 0.405625, 0.444375
#*# 	0.256875, 0.227500, 0.205625, 0.176875, 0.169375, 0.148750, 0.120625, 0.108750, 0.106875, 0.108125, 0.117500, 0.126875, 0.139375, 0.158750, 0.179375, 0.205625, 0.228750, 0.258750, 0.287500, 0.318750, 0.348750, 0.380000, 0.411250
#*# 	0.256875, 0.230625, 0.205000, 0.180000, 0.158125, 0.140000, 0.126250, 0.116250, 0.108125, 0.110625, 0.116875, 0.126875, 0.139375, 0.156875, 0.176875, 0.197500, 0.224375, 0.249375, 0.279375, 0.308125, 0.338125, 0.366875, 0.399375
#*# 	0.251250, 0.226250, 0.208125, 0.178750, 0.158750, 0.137500, 0.120625, 0.108750, 0.106250, 0.108125, 0.115000, 0.117500, 0.129375, 0.146875, 0.165625, 0.186250, 0.208750, 0.236875, 0.263750, 0.288750, 0.315000, 0.340625, 0.368750
#*# 	0.238125, 0.229375, 0.209375, 0.186875, 0.160625, 0.140625, 0.125000, 0.114375, 0.105625, 0.099375, 0.100000, 0.110000, 0.120000, 0.138125, 0.157500, 0.176875, 0.198750, 0.225625, 0.249375, 0.276250, 0.300000, 0.325625, 0.355000
#*# 	0.201250, 0.226250, 0.211250, 0.179375, 0.155625, 0.128125, 0.110625, 0.096875, 0.088750, 0.085625, 0.089375, 0.096875, 0.108750, 0.121250, 0.141250, 0.160000, 0.180000, 0.207500, 0.230000, 0.256250, 0.278125, 0.300625, 0.328125
#*# 	0.203750, 0.238750, 0.216875, 0.185625, 0.151250, 0.128750, 0.106875, 0.090625, 0.079375, 0.078125, 0.078125, 0.087500, 0.096875, 0.110000, 0.128750, 0.149375, 0.169375, 0.195000, 0.218750, 0.240000, 0.260625, 0.283750, 0.310000
#*# 	0.270000, 0.238125, 0.226875, 0.179375, 0.148750, 0.117500, 0.095625, 0.075000, 0.065625, 0.058125, 0.059375, 0.066875, 0.078750, 0.093125, 0.110000, 0.128750, 0.151250, 0.178125, 0.200000, 0.219375, 0.247500, 0.263125, 0.280625
#*# 	0.300625, 0.258750, 0.218125, 0.178125, 0.140000, 0.109375, 0.081250, 0.065000, 0.047500, 0.041250, 0.041250, 0.048750, 0.058750, 0.076250, 0.090000, 0.110625, 0.133125, 0.158125, 0.178125, 0.196250, 0.214375, 0.235625, 0.254375
#*# 	0.316875, 0.267500, 0.226250, 0.170625, 0.130000, 0.091250, 0.063750, 0.038750, 0.023125, 0.014375, 0.015625, 0.020000, 0.035000, 0.048750, 0.068750, 0.088125, 0.110000, 0.130000, 0.153125, 0.168125, 0.185000, 0.200000, 0.214375
#*# 	0.329375, 0.275625, 0.220000, 0.168750, 0.120625, 0.079375, 0.046875, 0.020000, 0.000000, -0.010625, -0.011875, -0.003125, 0.008125, 0.026875, 0.042500, 0.064375, 0.085000, 0.106875, 0.121250, 0.138125, 0.148750, 0.160625, 0.169375
#*# 	0.346250, 0.278750, 0.221250, 0.160000, 0.104375, 0.056875, 0.017500, -0.012500, -0.035000, -0.048750, -0.050625, -0.044375, -0.030625, -0.013750, 0.009375, 0.029375, 0.053750, 0.070000, 0.088125, 0.095000, 0.105625, 0.110000, 0.120000
#*# 	0.361875, 0.290625, 0.220000, 0.150625, 0.090000, 0.035000, -0.009375, -0.043125, -0.068750, -0.081250, -0.084375, -0.079375, -0.069375, -0.050000, -0.026875, -0.001250, 0.019375, 0.039375, 0.048750, 0.054375, 0.055000, 0.060625, 0.063750
#*# 	0.378750, 0.295000, 0.215625, 0.140000, 0.065625, 0.004375, -0.050000, -0.088750, -0.113750, -0.128125, -0.128125, -0.125625, -0.115000, -0.098750, -0.072500, -0.049375, -0.021250, -0.006875, 0.000000, -0.004375, -0.001250, -0.002500, 0.000000
#*# tension = 0.2
#*# min_x = 3.0
#*# algo = bicubic
#*# y_count = 17
#*# mesh_y_pps = 0
#*# min_y = 5.0
#*# x_count = 23
#*# max_y = 277.0
#*# mesh_x_pps = 0
#*# max_x = 340.92
#*#
#*# [probe]
#*# z_offset = 0.75
