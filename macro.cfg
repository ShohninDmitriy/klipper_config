[gcode_arcs]
resolution: 0.1

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  Пользовательские параметры
##  BED_TEMP      : Целевая температура для кровати. Также используется для принятия решений
##                  если требуется тепловое замачивание
##  EXTRUDER_TEMP : Целевая температура для экструдера
##  Системные переменные
variable_redo_qgl: 'true'
variable_extruder: 238
##   Финал : все, что нужно сделать после времени ожидания
gcode:
  # set default parameter value
  {% set bed_temp = params.BED_TEMP|default(107) %}
  {% set extruder_temp= params.EXTRUDER_TEMP|default(238) %}
  # получить фактическую температуру от кровати либо использовать внешний датчик
  # или датчик от нагревателя кровати
  # внешний датчик должен быть назван кровать
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  _RUNOUT_INFO
  # get filament state either use the safe variable or the runout sensor
  {% if 'filament_switch_sensor runout' in printer.configfile.settings %}
    {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
      {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
    {% else %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% endif %}
  {% else %}
    {% set filament_detected = printer.save_variables.variables.filament_loaded %}
  {% endif %}
  {% set targetBed = BED_TEMP|int%}
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp|int}
  {% if filament_detected == 'true' %}
    _SET_ACC VAL=PRINT
    _DISPLAY_PLATE
    _CASELIGHT_ON
    _LCD_KNOB COLOR=RED BLINK=1
    CLEAR_PAUSE
    SET_GCODE_OFFSET Z=0.0
    M220 S100
    M221 S100
    M140 S{BED_TEMP|int + 0.9}
    _CG28
    G90
    G0 Z5 F1800
    G0 X190 Y140 F15000
    M117 Heating Bed
    _PRINT_AR T="{"Bed act temp:%3dC target:%3dC target(%3dC)" % (actBed|int,targetBed|int,BED_TEMP|int)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
    M106 S102
    M190 S{bed_temp|int + 0.9} ; heat bed and wait
    M140 S{bed_temp|int}  ; heat bed
    M400 
  {% else %}
    _PRINT_AR T="No Filament loaded, print canceled!"
    BASE_CANCEL_PRINT
    UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  {% endif%}
  _LCD_KNOB COLOR=RED
  G21
  G90
  M83
  G32
  M117 Heating Extruder
  M109 S{EXTRUDER_TEMP|int}
  NOZZLECLEAN
  G28 Z
  M117 Heating Extruder
  M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
  M106 S0
  M104 S{EXTRUDER_TEMP|int}
  PRIME_LINE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  
[gcode_macro PRINT_END]
description: All commands after the print
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Получить границы #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Рассчитать спасительный ход #####
  {% if act_z < (max_z - 0.6) %}
    {% set z_safe = 0.6 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### конец определений #####
  M400
  M220 S100
  M221 S100
  G92 E0
  M83
  G1 E-4.0 F3600
  G91
  G0 Z{z_safe} F900
  TURN_OFF_HEATERS
  M107
  G90
  G0 X5 Y5 F15000
  M400
  TIMELAPSE_TAKE_FRAME
  G0 Z290 F600
  SET_GCODE_OFFSET Z=0.0
  _LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  _SET_ACC VAL=CONFIG

## Сбросить файл SD после завершения печати
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro G32]
description: Execute plate offset and QGL
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  MESH_LOAD AUTO=true
  _SET_PLATE_OFFSET
  _PRINT_AR T="Home" SHOW_LCD=true
  # Домой только при необходимости 
  _CG28
  G90
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

## Different Park positions
[gcode_macro PARKFRONT]
description: Park head front high
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  _CG28
  G90
  G0 X380 Y10 Z250 F15000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
description: Park head rear high
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  _CG28
  G90
  G0 X10 Y280 Z250 F15000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
description: Park head middle of printer
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  _CG28
  G90
  G0 X190 Y140 Z250 F15000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
description: Park head middle of bed low
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  _CG28
  G90
  G0 X190 Y140 Z5 F15000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
description: Helper: Action response 
gcode:
  # set default parameter value
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
description: Helper: Print time for start macro
gcode:
  #set default parameter value
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}      

[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  # get accel from parameter
  {% if 'S' in params %}
    {% set param_accel = params.S|float %}
  {% elif 'P' in params %}
    {% set param_accel = params.P|float %}
  {% elif 'T' in params %}
    {% set param_accel = params.T|float %}
  {% endif %}
  # calc accel_to deccel
  {% set param_accel_to_decel = (param_accel * 2.0 / 3.0) %}
  # get limits from config
  {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
  {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
  # limit values to config values 
  {% if param_accel < max_accel %}
    {% set accel = param_accel|int %}
  {% else %}
    {% set accel = max_accel|int %}
  {% endif%}
  {% if param_accel_to_decel < max_accel_to_decel %}
    {% set accel_to_decel = param_accel_to_decel|int %}
  {% else %}
    {% set accel_to_decel = max_accel_to_decel|int %}
  {% endif %}
  # end of definition
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  
[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  M115.1
