[gcode_arcs]
resolution: 0.1

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  Пользовательские параметры
##  BED_TEMP      : Целевая температура для кровати. Также используется для принятия решений
##                  если требуется тепловое замачивание
##  EXTRUDER_TEMP : Целевая температура для экструдера
##  Системные переменные
variable_redo_qgl: 'true'
variable_extruder: 238
##   Финал : все, что нужно сделать после времени ожидания
gcode:
  #############  Get user defines  #############
  {% set center_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set center_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set z_min_delta = printer['gcode_macro _USER_VARIABLE'].z_min_delta %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  #############  Get hardware enables  #############
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set bed_temp = params.BED_TEMP|default(107)|int %}
  {% set extruder_temp = params.EXTRUDER_TEMP|default(238)|int %}
  #############  BED temp values  #############
  # get actual temp from extra sensor or heater sensor
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature|int %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature|int %}
  {% endif %}
  {% if ena_runout == 'switch' %}
    {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
      {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
    {% elif 'virtual_sdcard' in printer and filament_loaded in printer.save_variables.variables %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = 'true' %}
    {% endif %}
  {% elif ena_runout == 'file' %}
    {% set filament_detected = printer.save_variables.variables.filament_loaded %}
  {% endif %}
  {% set targetBed = BED_TEMP|int%}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp|int}
  {% if filament_detected == 'true' %}
    {% if ena_auto_z_offset == 'flexplate' %} _DISPLAY_PLATE {% endif %}
    {% if ena_caselight == 'true' %} _CASELIGHT_ON {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RED BLINK=1  {% endif %}
    CLEAR_PAUSE
    SET_GCODE_OFFSET Z=0.0
    M220 S100
    M221 S100
    M140 S{BED_TEMP|int + 0.9}
    _CG28
    G90
    G0 Z{z_hop} F900
    G0 X{center_x} Y{center_y} F15000
    M117 Heating Bed
    _PRINT_AR T="{"Bed act temp:%3dC target:%3dC target(%3dC)" % (actBed|int,targetBed|int,BED_TEMP|int)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
    M106 S102
    M190 S{bed_temp|int + 0.9} ; heat bed and wait
    M140 S{bed_temp|int}  ; heat bed
    M400 
  {% else %}
    _PRINT_AR T="No Filament loaded, print canceled!"
    CANCEL_PRINT_BASE
    UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10
  {% endif%}
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RED  {% endif %}
  G21
  G90
  M83
  G32
  M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
  NOZZLECLEAN
  G28 Z
  _SET_ACC VAL=PRINT
  M117 Heating Extruder
  M106 S0
  M104 S{EXTRUDER_TEMP|int}
  PRIME_LINE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Получить границы #####
  {% set max_z = printer.toolhead.axis_maximum.z|float - 3 %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Get user defines #####
  {% set purge_x = printer['gcode_macro _USER_VARIABLE'].purge_x %}
  {% set purge_y = printer['gcode_macro _USER_VARIABLE'].purge_y %}
  {% set retreact = printer['gcode_macro _USER_VARIABLE'].retreact_end|float * -1 %}
  #############  Get hardware enables  #############
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  ##### Calculate save move #####
  {% if act_z < (max_z - 0.6) %}
    {% set z_safe = 0.6 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  #####  Get Temps for printout  #####
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  ##### end of definitions #####
  M400                                     ; wait for buffer to clear
  G92 E0                                   ; zero the extruder
  M83                                      ; relative extrusion
  G1 E{retreact} F3600                     ; retract filament
  G91                                      ; relative positioning
  G0 Z{z_safe} F900                        ; move nozzle to remove stringing
  TURN_OFF_HEATERS                         ; turn off heaters
  M107                                     ; turn off fan
  G90                                      ; absolute positioning
  G0 X{purge_x} Y{purge_y} F15000          ; park nozzle at brush bin
  M400
  TIMELAPSE_TAKE_FRAME
  G0 Z{max_z} F600
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=GREEN {% endif %}
  {% if ena_caselight == 'true' %} _CASELIGHT_OFF {% endif %}
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  _SET_ACC
  SET_GCODE_OFFSET Z=0.0
  M220 S100
  M221 S100
  UPDATE_DELAYED_GCODE ID=_BED_MESH_SAVE DURATION=10

### TimeLapse ###
[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
 {action_call_remote_method("timelapse_newframe")}
 
[gcode_macro TIMELAPSE_TAKE_RENDER]
gcode:
 {action_call_remote_method("timelapse_render")}


[gcode_macro G32]
description: Execute plate offset and QGL
gcode:
  #############  Get hardware enables  #############
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  #############  END of defines  #############
  _PRINT_AR T="Home" SHOW_LCD=true
  _CG28 ; home if not already homed
  BED_MESH_CLEAR
  ## flexplate must be excluded if switching to z_calibration
  {% if ena_auto_z_offset == 'flexplate' %} _SET_PLATE_OFFSET {% endif %}
  BED_MESH_LOAD AUTO=true
  G90
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  #####  get accel from parameter  #####
  {% if 'S' in params and params.S|float > 0 %}
      {% set param_accel = params.S|float %}
  {% elif 'P' in params and 'T' in params and params.P|float > 0 and params.T|float > 0 %}
    {% if params.P|float > params.T|float %}    
      {% set param_accel = params.T|float %}
    {% else %}
      {% set param_accel = params.P|float %}
    {% endif %}
  {% endif %}
  #####  get limits from config  #####
  {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
  {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
  #####  end of definition  #####
  {% if param_accel is defined %}  
    #####  calc accel_to deccel  #####
    {% set param_accel_to_decel = (param_accel / 2.0) %}
    #####  limit values to config values  ##### 
    {% if param_accel < max_accel %}
      {% set accel = param_accel %}
    {% else %}
      {% set accel = max_accel %}
    {% endif %}
    {% if param_accel_to_decel < max_accel_to_decel %}
      {% set accel_to_decel = param_accel_to_decel %}
    {% else %}
      {% set accel_to_decel = max_accel_to_decel %}
    {% endif %}
    #####  set value  #####
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel} RESPOND=0
  {% else %}
    {% set get_params = [] %}
    {% for key in params %}
      {% if key is not in ['M'] %}
        {% set get_params = get_params.append(key + params[key]) %}
      {% endif %}
    {% endfor %}
    {action_respond_info("Invalid M204 command \"M204 %s\"" % get_params|join(" "))}
  {% endif %}
  
[gcode_macro M900]
description: Set pressure advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

## print time value used only by PRINT_START
[gcode_macro _PRINT_TIME]
description: Helper: Print time for start macro
gcode:
  #####  set defaults  #####
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  #####  calc values for time  #####
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}
