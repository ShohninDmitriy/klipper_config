[gcode_arcs]
resolution: 0.05

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
default_parameter_BED_TEMP: 100
default_parameter_EXTRUDER_TEMP: 245
default_parameter_CHAMBER_TEMP: 45
default_parameter_SOAK: 30
default_parameter_DELTA_B: 15
default_parameter_DELTA_C: 10
default_parameter_CHAMBER_SOAK: 1
default_parameter_EXTRA_SOAK: true
##  System Varables
variable_redo_qgl: 'true'
variable_soak_tval: 0
# change this to define the wait time per call
variable_soak_ival: 1
variable_soak_chamber: 40
variable_soak_tchamber: 0
variable_extruder: 245
## Valid state 
##   Prepare : decision if heat Soak is needed 
##   HeatSoak: loop the time specified with SOAK
##   Chamber : wait for chamber reached CHAMBER_HEAT_SOAK 
##   Final   : all what needs to be done after wait timet
variable_state: 'Prepare'
variable_first: 'true'
gcode:
  # get actual temp from the bed either use an external sensor
  # or the sensor from the bed heater
  # external sensor must be named bed
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  ##  Prepare phase only dome at the first exection of PRINT_START
  {% if printer["gcode_macro PRINT_START"].state == 'Prepare' %}
    #############  Variable Setup  #############
    # get filament state either use the safe variable or the runout sensor
    {% if 'filament_switch_sensor runout' in printer %}
      _RUNOUT_INFO
      {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
        {% set filament_loaded = printer['filament_switch_sensor runout'].filament_detected|lower %}
      {% else %}
        {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
      {% endif %}
    {% else %}
      {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
    {% endif %}
    {% set targetBed = BED_TEMP|int - DELTA_B|int%}
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={EXTRUDER_TEMP|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_chamber VALUE={CHAMBER_TEMP|int - DELTA_C|int}
    {% if EXTRA_SOAK == 'true' %}
       SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE={CHAMBER_SOAK|int * 60}
    {% else %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE=0
    {% endif %}
    #############  Variable Setup  #############
    # check if filament is loaded 
    {% if filament_loaded == 'true' %}
      _DISPLAY_PLATE
      _HEATER_ON
      _CASELIGHT_ON
      _LCD_KNOB COLOR=RED BLINK=1
      M141 S{CHAMBER_TEMP|int} ; set target temp for exhaust fan
      _FILTER_ON               ; activate filter
      G28                      ; home to get toolhead in the middle
      # check if soak time is 0 or if the bed is still hot
      {% if (SOAK|int <= 0) or (actBed|int >= targetBed|int) %}
        M117 Heating Extruder
        {% if (SOAK|int <= 0) %}
          _PRINT_AR T="{"Bed act temp:%3d target:%3d (target(%3d) - delta(%d)) heat soak disabled" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        {% else %}
          _PRINT_AR T="{"Bed act temp:%3d target:%3d (target(%3d) - delta(%d)) heat soak not needed" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        {% endif %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"false"'
        M190 S{BED_TEMP|int}      ; heat bed and wait
        M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
        M400                      ; wait for buffer to clear
        BASE_PAUSE
        # go to chamber soak wait
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      {% else %}
        M117 Heating Bed
        _PRINT_AR T="{"Bed act temp:%3d target:%3d (target(%3d) - delta(%d)) heat soak needed" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
        M106 S90              ; switch part cooling ~35% to move air in chamber
        M190 S{BED_TEMP|int}  ; heat bed and wait
        M400                  ; wait for buffer to clear
        BASE_PAUSE
        # Call the wait macro the first time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
        _PRINT_TIME TEXT="HEAT SOAK" TIME={SOAK|int * 60}
        {% if SOAK|int * 60 > ival|int %}
          # soak time is bigger than interval 
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={(SOAK|int * 60) - ival|int}
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
        {% else %}
          # soak time is smaller than interval
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={SOAK|int * 60}
        {% endif %}
      {% endif%}    
    {% else %}
      _PRINT_AR T="No Filament loaded, print canceled!"
      BASE_CANCEL_PRINT
      UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
    {% endif%}
  ## Heatsoak Phase call the delay macro until time is over
  {% elif printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    # switch on extruder at around 12 min left 
    {% if (tval|int) <= 720 + (EXTRUDER_TEMP|int) - 240  %}
      {%if EXTRUDER_TEMP|int != printer.extruder.target|int %}
        BASE_RESUME
        M104 S{EXTRUDER_TEMP} ; heat extruder
        M400                  ; wait for buffer to clear
        BASE_PAUSE
      {% endif %}
    {% endif %}
    # check remaining time 
    {% if tval|int > 0 %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        # run last loop with time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # go to chamber soak wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      _PRINT_AR T="{"Bed act temp=%3d heat soak done" % (actBed|int)}"
    {% endif %}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tchamber %}
    {% set targetChamber = printer["gcode_macro PRINT_START"].soak_chamber %}
    {% set actChamber = printer['temperature_fan chamber'].temperature %}
    # check remaining time and temp difference 
    {% if (tval|int > 0) and (actChamber|int < targetChamber|int) %}
      # print info only add firt run
      {% if printer["gcode_macro PRINT_START"].first == 'true' %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"false"'
        _PRINT_AR T="{"Chamber act temp:%3d target:%3d heat soak needed" % (actChamber|int,targetChamber|int)}"
        _PRINT_TIME TEXT="CHAMBER" TIME={tval|int}
      {% endif %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        ## last loop 
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tchamber VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # Finish PRINT_START
      {% if tval|int == 0 %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3d target:%3d heat soak disabled" % (actChamber|int,targetChamber|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3d target:%3d heat soak timed out" % (actChamber|int,targetChamber|int)}"
         {% endif %}
      {% else %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3d target:%3d heat soak not needed" % (actChamber|int,targetChamber|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3d target:%3d heat soak temp reached" % (actChamber|int,targetChamber|int)}"
        {% endif %} 
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% endif %}
  ## all whats need to run at the end
  {% elif printer["gcode_macro PRINT_START"].state == 'Final' %}
    BASE_RESUME
    # set staus back to prepare for the next run 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
    M106 S0  ; turn off part cooling fan
    _LCD_KNOB COLOR=RED
    G21  ; set units to millimeters
    G90  ; use absolute coordinates
    M83  ; use relative distances for extrusion
    _G32 ; home & QGL
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
    NOZZLECLEAN
    G28 Z ; home
    # Extruder is disabled while using the probe
    # need to wait to reach target again
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int} ; heat extruder and wait
    PRIME_LINE
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
    _PRINT_AR T="PRINT_START finished"
  {% endif %}
 
## Wait interval macro to break the loop
[delayed_gcode _START_PRINT_WAIT]
gcode:
  # store variables for easier reading 
  {% set extruder = printer["gcode_macro PRINT_START"].extruder %}
  # Print remaining time
  {% if printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    _PRINT_TIME TEXT="HEAT SOAK" TIME={tval|int}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tchamber %}
    _PRINT_TIME TEXT="SOAK" TIME={tval|int}
  {% endif %}
  # Check if printer is still in state 'Printing'
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Junp back to PRINT_START
    PRINT_START EXTRUDER_TEMP={extruder|int}
  {% else %}
    # break loop
    # insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Get Boundaries #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Calculate save move #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  M400                                     ; wait for buffer to clear
  G92 E0                                   ; zero the extruder
  M83                                      ; relative extrusion
  G1 E-2.0 F3600                           ; retract filament
  G91                                      ; relative positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F9000   ; move nozzle to remove stringing
  TURN_OFF_HEATERS                         ; turn off heaters
  M107                                     ; turn off fan
  M141 S15                                 ; vent chamber (setting fan to below ambient)
  G90                                      ; absolute positioning
  G0 X0 Y0 F9000                           ; park nozzle at brush bin
  _LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION=1800
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

## Reset SD File after Print Done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro _G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  _SET_PLATE_OFFSET
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  # Home only if needed 
  _CG28 ; home if not already homed
  ## check if QGL was already executed
  ## variable redo_qgl will always force a QGL
  ## watchdog for QGL
  UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=300
  {% if printer["gcode_macro PRINT_START"].redo_qgl == 'true' %}
    _PRINT_AR T="QGL forced by PRINT_START"
  {% else %} 
    ## if no QGL was done until now
    {% if printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done == 'false' %}
      _PRINT_AR T="QGL not executed yet"
    {% endif %}
  {% endif %}
  ## get the head to the middle
  G90                   ; absolute positioning
  G0 Z30 F1800
  G0 X160 Y140 F18000
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro _FILAMENT_BALL]
default_parameter_WAIT: 0
gcode:
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Ball up the filament tip
  G92 E0       ; zero the extruder
  M82          ; absolute extrusion
  G1 E2 F3600
  G1 E0 F3600
  G1 E4 F3600
  G1 E0 F3600
  G1 E8 F3600
  G1 E0 F3600
  M83          ; relative extrusion
  G1 E-25 F3600
  G4 P{WAIT|int * 1000}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

##  Load Filament (Afterburner)
[gcode_macro FILAMENT_LOAD]
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    ## Move to waste bin
    _CG28                 ; home if not already homed
    G90                   ; absolute positioning
    G0 X0 Y0 Z30 F9000 ; park nozzle at brush bin
    # check the Extruder temp is above minimum extrution temp
    {% set extruder_target = printer.extruder.target %}
    _LCD_KNOB COLOR=BLUE
    {% if printer.extruder.temperature|int < minTemp|int %}
      {action_respond_info("Extruder Temp to low heat to %2d" % (minTemp|int + 30))}
      M109 S{minTemp|int + 30} ; heat extruder and wait
    {% endif %}
    _LCD_KNOB COLOR=RESTORE
    M83                   ; set extruder to relative
    G1 E125 F1800          ; quickly load 90mm filament
    G1 E30 F120           ; slower extrusion for hotend path
    G1 E-2 F1500          ; retract 
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    # clean nozzle
    _WIPE
    G0 Z30 F1800
    G0 X0 Y0 F9000 ; park nozzle at brush bin
    # restore old extruder temperature
    M109 S{extruder_target}
    _PRINT_AR T="Filament loaded"
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}
 
##  Remove Filament (Afterburner)
[gcode_macro FILAMENT_UNLOAD]
default_parameter_DISTANCE: 150
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    _LCD_KNOB COLOR=BLUE
    # check the Extruder temp is above minimum extrution temp
    {% set extruder_target = printer.extruder.target %}
    {% if printer.extruder.temperature|int < minTemp|int %}
      {action_respond_info("Extruder Temp to low heat to %2d" % (minTemp|int + 30))}
      M109 S{minTemp|int + 30} ; heat extruder and wait
    {% endif %}
    # Ball up the filament tip and retract out past the extruder gears
    _LCD_KNOB COLOR=RESTORE
    _FILAMENT_BALL WAIT=3
    M83 ; Relative extrusion
    G1 E{DISTANCE|float * -1} F3000
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # restore old extruder temperature
    M109 S{extruder_target}
    _PRINT_AR T="Filament unloaded"
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}  

## purge and clean the nozzle in prep for printing    
[gcode_macro NOZZLECLEAN]
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                  ; home if not already homed
  G90                    ; absolute positioning
  G1 X0 Y0 Z10 F9000  ; move to purge bucket location
  # check the Extruder temp is above minimum extrution temp
  {% set extruder_target = printer.extruder.target %}
  {% if printer.extruder.temperature|int < minTemp|int %}
    _PRINT_AR T="{"Extruder Temp to low heat to %2d" % (minTemp|int + 30)}"
    M109 S{minTemp|int + 30} ; heat extruder and wait
  {% endif %}
  G1 Z2.5 F900  ; lower Z
  G92 E0        ; reset Extruder
  M83           ; relative extrusion
  G1 E5.00 F500 ; purge filament (5mm)
  G1 E5.00 F800 ; purge filament (5mm)
  G1 E-0.5 F800 ; retract filament (0.5)
  G4 P500
  _WIPE
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  G90 ; absolute positioning
  # move to wiper start pos
  G0 X80.00 Y255 Z1.5 F3000
  # move head diagonal to brush
  {% for wipe in range(10) %}
    {% for coordinate in [(120,255),(80,255)] %}
      G0 X{coordinate[0]} Y{coordinate[1] - 0.5 * wipe} F18000
    {% endfor %}
  {% endfor %}
    
[gcode_macro PRIME_LINE]
default_parameter_SEG: 11
default_parameter_LENGHT: 220
default_parameter_EXTRUDE: 22
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # calculate values of each segment
  {% set y_seg = LENGHT|float / SEG|float %}
  {% set e_seg = EXTRUDE|float / SEG|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                  ; home if not already homed
  G92 E0                                 ; reset Extruder
  G90                                    ; absolute positioning
  G1 X5 Y30 Z5 F5000.0                   ; move to start position
  G1 Z0.24 F900                          ; move Z Axis down
  M83                                    ; relative extrusion
  G91                                    ; relative positioning
  {% for segment in range(SEG|int-1) %}  ; draw the first line
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4                                ; move to side
  {% for segment in range(SEG|int-1) %}  ; draw the second line
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G1 Z5.0 F1500                          ; move Z Axis up
  G92 E0                                 ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  _CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X380 Y10 Z175 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  _CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X10 Y280 Z250 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  _CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X160 Y140 Z200 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  _CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X160 Y140 Z30 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
#[gcode_macro TIMER]
#default_parameter_TEXT: "Timer"
#default_parameter_TIME: 10
#default_parameter_INTERVAL: 10
#variable_var_text: "Timer"
#variable_var_time: 0
#variable_var_ival: 0
#variable_done: 1
#gcode:
#  # check that time in min is bigger than 0
#  {% if TIME|int > 0 %}
#    SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_text VALUE='{TEXT|string}'
#    SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_ival VALUE={INTERVAL|int}
#    SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=done VALUE=0
#    # in this loop TIME is still in min
#    _PRINT_TIME TEXT={TEXT} TIME={TIME|int * 60}
#    # check if interval is bigger as time
#    {% if TIME|int * 60 > INTERVAL|int %}
#      SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_time VALUE={(TIME|int * 60) - INTERVAL|int}
#      UPDATE_DELAYED_GCODE ID=TIMER_WAIT DURATION={INTERVAL|int}
#    {% else %}
#      SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_time VALUE=0
#      UPDATE_DELAYED_GCODE ID=TIMER_WAIT DURATION={TIME|int * 60}
#    {% endif %}
#  {% endif %}

#[delayed_gcode TIMER_WAIT]
## use UPDATE_DELAYED_GCODE ID=TIMER_WAIT Duration=10
#gcode:
#  # Print remaining time
#  {% set TEXT = printer["gcode_macro TIMER"].var_text %}
#  {% set TIME = printer["gcode_macro TIMER"].var_time %}
#  {% set IVAL = printer["gcode_macro TIMER"].var_ival %}
#  _PRINT_TIME TEXT={TEXT} TIME={TIME|int}
#  # check if we are done and print last
#  {% if TIME|int > 0 %}
#    # check if interval is bigger than remaining time
#    {% if IVAL >= TIME %}
#      # run last loop with time
#      SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_time VALUE=0
#      UPDATE_DELAYED_GCODE ID=TIMER_WAIT DURATION={TIME|int}
#    {% else %}
#      # reduce time by interval
#      SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=var_time VALUE={TIME|int - IVAL|int}
#      UPDATE_DELAYED_GCODE ID=TIMER_WAIT DURATION={IVAL|int}
#    {% endif %}
#  {% else %}
#    SET_GCODE_VARIABLE MACRO=TIMER VARIABLE=done VALUE=1
#  {% endif %}
  
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
default_parameter_SHOW_LCD: 'false'
gcode:
  {% if SHOW_LCD == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
default_parameter_TEXT: 'Timer'
## true ot false
default_parameter_SHOW_AR: 'false'
gcode:
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if SHOW_AR == 'true' %}
    {action_respond_info("%s %d:%02d" % (TEXT,minutes|int,seconds|int))}
  {% endif %}      

#[gcode_macro _TOOLHEAD_INFO]
#gcode:
#  {% set min = printer.toolhead.axis_minimum %}
#  {% set act = printer.toolhead.position%}
#  {% set max = printer.toolhead.axis_maximum %}
#  {action_respond_info("X:Y:Z min %3d:%3d:%3d act %3d:%3d:%3d max %3d:%3d:%3d" %
#  (min.x|int, min.y|int, min.z|int, act.x|int, act.y|int, act.z|int, max.x|int, max.y|int, max.z|int))}

## Ajust z-Offset relative to bed temp
#[gcode_macro TEMPADJUSTOFFSET]
#gcode:
#    #ABS
#    {% if printer.heater_bed.target >= 100 %}
#    {% endif %}
#    #PETG
#    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
#        SET_GCODE_OFFSET Z=0 MOVE=1
#        SET_GCODE_OFFSET Z_ADJUST=-0#.025 MOVE=1
#    {% endif %}
#    #PLA
#    {% if printer.heater_bed.target <= 65 %}
#        SET_GCODE_OFFSET Z=0 MOVE=1
#        SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
#    {% endif %}

## Ajust Presure advance relative to bed temp  
#gcode_macro TEMPADJUSTPA]
#gcode:
#    #ABS
#    {% if printer.heater_bed.target >= 100 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.05585
#    {% endif %}
#    #PETG
#    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.0785
#    {% endif %}
#    #PLA
#    {% if printer.heater_bed.target <= 65 %}
#        SET_PRESSURE_ADVANCE ADVANCE=0.0325
#    {% endif %}

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh CoreXY_B-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

  