[gcode_arcs]
#  Support for gcode arc (G2/G3) commands.
resolution: 0.2
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  Пользовательские параметры
##  BED_TEMP      : Целевая температура для кровати. Также используется для принятия решений
##                  если требуется тепловое замачивание
##  EXTRUDER_TEMP : Целевая температура для экструдера
##  Системные переменные
variable_redo_qgl: 'true'
variable_extruder: 240
variable_bed: 107
##   Финал : все, что нужно сделать после времени ожидания
gcode:
  #############  Получить пользовательские настройки  #############
  {% set park_pos = printer['gcode_macro _USER_VARIABLE'].park_bed %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  #############  Получить задействованное оборудование  #############
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set bed_temp = params.BED_TEMP|default(107)|int %}
  {% set extruder_temp = params.EXTRUDER_TEMP|default(238)|int %}
  #############  BED temp values  #############
  # get actual temp from extra sensor or heater sensor
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature|int %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature|int %}
  {% endif %}
  {% if ena_runout == 'switch' %}
    {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
      {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
    {% elif 'virtual_sdcard' in printer and filament_loaded in printer.save_variables.variables %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = 'true' %}
    {% endif %}
  {% elif ena_runout == 'file' %}
    {% set filament_detected = printer.save_variables.variables.filament_loaded %}
  {% endif %}
  {% set targetBed = bed_temp|int%}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp|int}
  {% if filament_detected == 'true' %}
    {% if ena_auto_z_offset == 'flexplate' %} LIST_PLATES {% endif %}
    {% if ena_caselight == 'true' %} _CASELIGHT_ON {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RED {% endif %}
    CLEAR_PAUSE
    SET_GCODE_OFFSET Z=0.0
    M220 S100
    M221 S100
    M140 S{bed_temp|int}
    G28
    G90
    G0 Z{park_pos[2]} F600                  ; move nozzle to z high first
    G0 X{park_pos[0]} Y{park_pos[1]} F18000 ; home to get toolhead in the middle
    _PRINT_AR T="Heating Bed" SHOW_LCD=true
    _PRINT_AR T="{"Bed act temp:%3dC target:%3dC target(%3dC)" % (actBed|int,targetBed|int,bed_temp|int)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
    M106 S128
    M140 S{(bed_temp|int)+2.5}                    ; heat bed and wait
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={(bed_temp|int)+2.5}
    M140 S{bed_temp|int}                    ; heat bed
    M400
  {% else %}
    _PRINT_AR T="No Filament loaded, print canceled!"
    CANCEL_PRINT_BASE
    UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10
  {% endif%}
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RED  {% endif %}
  G21
  G90
  M83
  G32
  M400
  _PRINT_AR T="Heating Extruder" SHOW_LCD=true
  M104 S{extruder_temp|int}              ; heat extruder and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp|int}
  NOZZLECLEAN
  G28 Z
  _SET_ACC VAL=PRINT
  M106 S0
  PRIME_LINE
  M117 Printing
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Получить границы #####
  {% set max_z = printer.toolhead.axis_maximum.z|float - 3 %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Получить пользовательские настройки #####
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set retreact = printer['gcode_macro _USER_VARIABLE'].retreact_end|float * -1 %}
  #############  Получить задействованное оборудование  #############
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  {% set ena_unload_sd = printer['gcode_macro _USER_VARIABLE'].print_end_unload_sd|lower %}
  ##### Вычисление безопасного перемещения #####
  {% if act_z < (max_z - 0.6) %}
    {% set z_safe = 0.6 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  #####  Get Temps for printout  #####
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  ##### конец определений #####
  M400                                       ; wait for buffer to clear
  G92 E0                                     ; zero the extruder
  M83                                        ; relative extrusion
  G1 E{retreact} F3600                       ; retract filament
  G91                                        ; relative positioning
  G0 Z{z_safe} F600                          ; move nozzle to remove stringing
  TURN_OFF_HEATERS                           ; turn off heaters
  M107                                       ; turn off fan
  G90 
  PARK                                       ; absolute positioning
  #G0 X{purge_pos[0]} Y{purge_pos[1]} F18000  ; park nozzle at brush bin
  M400
  #HYPERLAPSE_STOP
   _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=GREEN {% endif %}
  {% if ena_caselight == 'true' %} _CASELIGHT_OFF {% endif %}
  {% if ena_unload_sd == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  {% if ena_neo == 'true' %} UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=100 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
   G0 Z{max_z} F600
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  _SET_ACC
  SET_GCODE_OFFSET Z=0.0
  M220 S100
  M221 S100
  #UPDATE_DELAYED_GCODE ID=_BED_MESH_SAVE DURATION=10

[gcode_macro G32]
description: Execute plate offset and QGL
gcode:
  #############  Получить задействованное оборудование  #############
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  ##### конец определений #####
  _PRINT_AR T="Home" SHOW_LCD=true
  _CG28 ; home if not already homed
  BED_MESH_CLEAR
  ## flexplate must be excluded if switching to z_calibration
  {% if ena_auto_z_offset == 'flexplate' %} _SET_PLATE_OFFSET {% endif %}
  BED_MESH_LOAD AUTO=true
  G90
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
 
## print time value used only by PRINT_START
[gcode_macro _PRINT_TIME]
description: Helper: Print time for start macro
gcode:
  #####  установите значения по умолчанию  #####
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  #####  расчетные значения для времени  #####
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}
