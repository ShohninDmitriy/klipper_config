[gcode_arcs]
resolution: 0.05

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  Пользовательские параметры
##  BED_TEMP      : Целевая температура для кровати. Также используется для принятия решений
##                  если требуется тепловое замачивание
##  EXTRUDER_TEMP : Целевая температура для экструдера
##  CHAMBER_TEMP  : Целевая температура для управления вентилятором камеры
##  SOAK          : Время замачивания в минутах
##  DELTA_B       : Допустимая дельта между фактической температурой слоя и целевой
##                  температура для принятия решения, если требуется тепловое замачивание.
##  DELTA_C       : Допустимая дельта между фактической температурой камеры и целью
##                  будет ждать, пока цель не будет достигнута или время не станет равным нулю
##  CHAMBER_SOAK  : Дополнительное время замачивания, если камера не находится на цели - DELTA_C
##  EXTRA_SOAK    : Включает Замачивание камеры ('true'/'false')
default_parameter_BED_TEMP: 100
default_parameter_EXTRUDER_TEMP: 245
default_parameter_CHAMBER_TEMP: 50
default_parameter_SOAK: 30
default_parameter_DELTA_B: 15
default_parameter_DELTA_C: 10
default_parameter_CHAMBER_SOAK: 15
default_parameter_EXTRA_SOAK: true
##  Системные переменные
variable_redo_qgl: 'true'
variable_soak_tval: 0
# измените это, чтобы определить время ожидания для каждого вызова
variable_soak_ival: 1
variable_chamber: 40
variable_delta_c: 10
variable_soak_time_c: 0
variable_extruder: 245
variable_endstop: 0
## Актуальное Состояние
##   Подготовка : решение о необходимости теплового замачивания
##   Тепловое замачивание: циклическое время, указанное при ЗАМАЧИВАНИИ
##   Камера : дождитесь, пока камера достигнет CHAMBER_HEAT_SOAK
##   Финал : все, что нужно сделать после времени ожидания
variable_state: 'Prepare'
variable_first: 'true'
gcode:
  # получить фактическую температуру от кровати либо использовать внешний датчик
  # или датчик от нагревателя кровати
  # внешний датчик должен быть назван кровать
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  ##  Подготовьте фазу только при первом выполнении PRINT_START
  {% if printer["gcode_macro PRINT_START"].state == 'Prepare' %}
    #############  Variable Setup  #############
    # получить состояние прутока либо с помощью безопасной переменной либо с помощью датчика отсутсвия
    {% if 'filament_switch_sensor runout' in printer.configfile.settings %}
      _RUNOUT_INFO
      {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
        {% set filament_loaded = printer['filament_switch_sensor runout'].filament_detected|lower %}
      {% else %}
        {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
      {% endif %}
    {% elif 'filament_motion_sensor runout' in printer.configfile.settings %}
      _RUNOUT_INFO
      #{% if printer['filament_motion_sensor runout'].enabled|lower == 'true' %}
      #  {% set filament_loaded = printer['filament_motion_sensor runout'].filament_detected|lower %}
      #{% else %}
        {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
      #{% endif %}
    {% else %}
      {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
    {% endif %}
    {% set targetBed = BED_TEMP|int - DELTA_B|int%}
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={EXTRUDER_TEMP|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber VALUE={CHAMBER_TEMP|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=delta_c VALUE={DELTA_C|int}
    {% if EXTRA_SOAK == 'true' %}
       SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE={CHAMBER_SOAK|int * 60}
    {% else %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE=0
    {% endif %}
    #############  Variable Setup  #############
    # проверьте, загружен ли пруток 
    {% if filament_loaded == 'true' %}
      _DISPLAY_PLATE
      _HEATER_ON
      _CASELIGHT_ON
      _LCD_KNOB COLOR=RED BLINK=1
      M141 S0                  ; exhaust fan off
      _FILTER_ON               ; активировать фильтр
      _CG28                    ; home if needed
      # Move to Middle
      G90
      G0 Z5 F1800             ; move nozzle to z high first
      G0 X175 Y175 F18000      ; home to get toolhead in the middle
      # проверьте, если время замачивания равно 0 или если кровать все еще горячая
      {% if (SOAK|int <= 0) or (actBed|int >= targetBed|int) %}
        M117 Heating Extruder
        {% if (SOAK|int <= 0) %}
          _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak disabled" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        {% else %}
          _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak not needed" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        {% endif %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"false"'
        M190 S{BED_TEMP|int}      ; Нагрев стола с ожиданием
        M109 S{EXTRUDER_TEMP|int} ; Нагрев сопла с ожиданием
        M400                      ; ожидание очистки буфера
        BASE_PAUSE
        # go to chamber soak wait
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      {% else %}
        M117 Heating Bed
        _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak needed" % (actBed|int,targetBed|int,BED_TEMP|int,DELTA_B|int)}"
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
        M106 S90              ; включение вентилятора охлаждения детали 35% для смешивания воздуха в камере
        M190 S{BED_TEMP|int}  ; Нагрев стола с ожиданием
        M400                  ; ожидание очистки буфера
        BASE_PAUSE
        # Вызов макроса ожидания в первый раз 
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
        _PRINT_TIME TEXT="HEAT SOAK" TIME={SOAK|int * 60}
        {% if SOAK|int * 60 > ival|int %}
          # время выдержки больше интервала
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={(SOAK|int * 60) - ival|int}
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
        {% else %}
          # время выдержки меньше интервала
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={SOAK|int * 60}
        {% endif %}
      {% endif%}    
    {% else %}
      _PRINT_AR T="No Filament loaded, print canceled!"
      BASE_CANCEL_PRINT
      UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
    {% endif%}
  ## Heatsoak Phase вызывает макрос задержки до истечения времени
  {% elif printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    # хранить переменные для облегчения чтения
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    # включить нагрев сопла примерно через 12 минут до конца
    {% if (tval|int) <= 720 + (EXTRUDER_TEMP|int) - 240  %}
      {%if EXTRUDER_TEMP|int != printer.extruder.target|int %}
        BASE_RESUME
        M104 S{EXTRUDER_TEMP} ; Нагрев сопла
        M400                  ; ожидание очистки буфера
        BASE_PAUSE
      {% endif %}
    {% endif %}
    # проверка оставшегося время 
    {% if tval|int > 0 %}
      # проверка, не превышает ли интервал оставшегося времени
      {% if ival >= tval %}
        # выполнить последний цикл со временем
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## сократить время на интервал
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # go to chamber soak wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      _PRINT_AR T="{"Bed act temp=%3dC heat soak done" % (actBed|int)}"
    {% endif %}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    # хранить переменные для облегчения чтения 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_time_c %}
    {% set chamber = printer["gcode_macro PRINT_START"].chamber %}
    {% set delta = printer["gcode_macro PRINT_START"].delta_c %}
    {% set targetChamber = chamber - delta %}
    {% set actChamber = printer['temperature_fan chamber'].temperature %}
    # проверить оставшееся время и разницу температур 
    {% if (tval|int > 0) and (actChamber|int < targetChamber|int) %}
      # информация для печати только добавить первый запуск
      {% if printer["gcode_macro PRINT_START"].first == 'true' %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"false"'
        _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak needed" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        _PRINT_TIME TEXT="CHAMBER" TIME={tval|int}
      {% endif %}
      # проверьте, не превышает ли интервал оставшегося времени
      {% if ival >= tval %}
        ## ## последний цикл
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## сократить время на интервал
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # Завершение PRINT_START
      {% if tval|int == 0 %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak disabled" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak timed out" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
         {% endif %}
      {% else %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak not needed" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak temp reached" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% endif %} 
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% endif %}
  ## все, что нужно запустить в конце
  {% elif printer["gcode_macro PRINT_START"].state == 'Final' %}
    BASE_RESUME
    # вернуть статус, чтобы подготовиться к следующему запуску 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
    M106 S0  ; выключить вентилятор охлаждения детали
    _LCD_KNOB COLOR=RED
    G21  ; установить единицы измерения в миллиметры
    G90  ; использовать абсолютные координаты
    M83  ; использовать относительные расстояния для экструзии
    G32  ; парковка
    M141 S{CHAMBER_TEMP|int}  ; установить целевую температуру для вытяжного вентилятора
    NOZZLECLEAN
    G28 Z ; парковка Z
    # Check Extruder
    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP|int} ; Нагрев сопла с ожиданием
    PRIME_LINE
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
    _PRINT_AR T="{"PRINT_START done. Endstop temp:%2.2fC" % (printer['temperature_sensor endstop'].temperature)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=endstop VALUE={printer['temperature_sensor endstop'].temperature}
  {% endif %}
 
## Макрос интервала ожидания для разрыва цикла
[delayed_gcode _START_PRINT_WAIT]
gcode:
  # хранить переменные для облегчения чтения
  {% set extruder = printer["gcode_macro PRINT_START"].extruder %}
  {% set chamber = printer["gcode_macro PRINT_START"].chamber %}
  # Print remaining time
  {% if printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    _PRINT_TIME TEXT="HEAT SOAK" TIME={tval|int}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_time_c %}
    _PRINT_TIME TEXT="SOAK" TIME={tval|int}
  {% endif %}
  # Убедитесь, что принтер все еще находится в состоянии «Печать»
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Вернуться к PRINT_START
    PRINT_START EXTRUDER_TEMP={extruder|int} CHAMBER_TEMP={chamber|int}
  {% else %}
    # разрыв петли
    # убедитесь, что состояние правильное для следующего запуска печати
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Получить границы #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Рассчитать спасительный ход #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### конец определений #####
  M400                                     ; ожидание очистки буфера  
  G92 E0                                   ; обнулить экструдер
  M83                                      ; относительная экструзия
  G1 E-2.0 F3600                           ; втянуть нить 
  G91                                      ; относительное позиционирование
  G0 X{x_safe} Y{y_safe} Z{z_safe} F9000   ; переместите сопло, чтобы удалить нить
  TURN_OFF_HEATERS                         ; выключить обогреватели
  M107                                     ; выключить вентилятор
  M141 S15                                 ; вентиляция камеры (установка вентилятора ниже температуры окружающей среды)
  G90                                      ; абсолютное позиционирование
  G0 X0 Y0 F9000                           ; парковать насадку у бункера для щеток
  _LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION=1800
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  {% set endstop_start = printer["gcode_macro PRINT_START"].endstop %}
  {% set endstop_end = printer['temperature_sensor endstop'].temperature %}
  _PRINT_AR T="{"PRINT_END done. Endstop temp START:%2.2fC END:%2.2fC" % (endstop_start, endstop_end)}"
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

## Сбросить файл SD после завершения печати
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  _SET_PLATE_OFFSET
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  # Домой только при необходимости 
  _CG28                 ; домой, если еще не дома
  G90                   ; абсолютное позиционирование
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

## продуть и очистить сопло перед печатью       
[gcode_macro NOZZLECLEAN]
gcode:
  # сохранить минимальную температуру экструзии в переменной
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                  ; домой, если еще не дома
  G90                    ; абсолютное позиционирование
  G1 X0 Y0 Z10 F9000     ; перейти к месту продувки ведра
  # проверьте, что температура экструдера выше минимальной температуры экструзии
  {% set extruder_target = printer.extruder.target %}
  {% if printer.extruder.temperature|int < minTemp|int %}
    _PRINT_AR T="{"Extruder Temp to low heat to %2dC" % (minTemp|int + 30)}"
    M109 S{minTemp|int + 30} ; нагреть экструдер и ждать
  {% endif %}
  G1 Z2.5 F900  ; lower Z
  G92 E0        ; сбросить экструдер
  M83           ; относительная экструзия
  G1 E5.00 F500 ; продувочная нить (5 мм)
  G1 E5.00 F800 ; продувочная нить (5 мм)
  G1 E-0.5 F800 ; втянуть (0,5)
  G4 P500
  _WIPE
  # восстановить предыдущую температуру экструдера
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  G90 ; абсолютное позиционирование
  # перейти в положение пуска стеклоочистителя
  G0 X80.00 Y250 Z1.5 F3000
  # переместите голову по диагонали к кисти
  {% for wipe in range(5) %}
    {% for coordinate in [(120,350),(80,350)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 1.0 * wipe} F{6000 + 1000 * wipe}
    {% endfor %}
  {% endfor %}
  G0 X120 Y355 F18000
    
[gcode_macro PRIME_LINE]
default_parameter_SEG: 11
default_parameter_LENGHT: 220
default_parameter_EXTRUDE: 22
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # рассчитать значения каждого сегмента
  {% set y_seg = LENGHT|float / SEG|float %}
  {% set e_seg = EXTRUDE|float / SEG|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                  ; домой, если еще не дома
  G92 E0                                 ; сбросить экструдер
  G90                                    ; абсолютное позиционирование
  G1 X5 Y30 Z5 F5000.0                   ; перейти в начальную позицию
  G1 Z0.24 F900                          ; переместить ось Z вниз
  M83                                    ; относительная экструзия
  G91                                    ; относительное позиционирование
  {% for segment in range(SEG|int-1) %}  ; нарисуйте первую линию
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4                                ; перейти в сторону
  {% for segment in range(SEG|int-1) %}  ; нарисуйте вторую линию
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G1 Z5.0 F1500                          ; переместить ось Z вверх
  G92 E0                                 ; сбросить экструдер
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  _CG28 ; домой, если еще не дома
  G90   ; абсолютное позиционирование
  G0 X380 Y10 Z175 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  _CG28 ; домой, если еще не дома
  G90   ; абсолютное позиционирование
  G0 X10 Y280 Z250 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  _CG28 ; домой, если еще не дома
  G90   ; абсолютное позиционирование
  G0 X190 Y140 Z200 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  _CG28 ; домой, если еще не дома
  G90   ; абсолютное позиционирование
  G0 X160 Y140 Z30 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
default_parameter_SHOW_LCD: 'false'
gcode:
  {% if SHOW_LCD == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
default_parameter_TEXT: 'Timer'
## true ot false
default_parameter_SHOW_AR: 'false'
gcode:
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if SHOW_AR == 'true' %}
    {action_respond_info("%s %d:%02d" % (TEXT,minutes|int,seconds|int))}
  {% endif %}      

[gcode_macro M204]
rename_existing: M2041
gcode:
  {% if 'P' in params %}
    {% set accel = params.P %}
  {% elif 'S' in params %}
    {% set accel = params.S %}
  {% elif 'T' in params %}
    {% set accel = params.T %}
  {% endif %}
  {% set accel_to_decel = (accel|float * 2.0 / 3.0)|int %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh CoreXY_B-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro DUMP_SETTINGS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.settings %}
    {% set show = ['extruder'] %}
    {% if name1 is not in show %}
      {% set param = "printer.configfile.settings['%s'] = %s" % (name1, printer.configfile.settings[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_MCU_VER]
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
        

[gcode_macro DUMP_SATS]
gcode:
  {% set cpu_t = printer.system_stats.cputime %}
  {% set cpu_h = (cpu_t / 3600)|int %}
  {% set cpu_m = ((cpu_t / 60) % 60)|int %}
  {% set cpu_s = (cpu_t % 60)|int %}
  {% set sysload = printer.system_stats.sysload|float * 100.0 %}
  {% set mem_val = printer.system_stats.memavail|float / 8388608.0 %}
  {action_respond_info("klipper process statistic:
                        Head stalls: %d
                        CPU Time: %d:%02d:%02d
                        Sysload: %.2f percent
                        Mem Val: %.3f MB" % (printer.toolhead.stalls, cpu_h, cpu_m ,cpu_s, sysload, mem_val))}


  