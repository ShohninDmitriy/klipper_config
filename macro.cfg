[gcode_arcs]
resolution: 0.05

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  Пользовательские параметры
##  BED_TEMP      : Целевая температура для кровати. Также используется для принятия решений
##                  если требуется тепловое замачивание
##  EXTRUDER_TEMP : Целевая температура для экструдера
default_parameter_BED_TEMP: 107
default_parameter_EXTRUDER_TEMP: 238
##  Системные переменные
variable_redo_qgl: 'true'
variable_extruder: 238
## Актуальное Состояние
##   Финал : все, что нужно сделать после времени ожидания
variable_state: 'Prepare'
variable_first: 'true'
gcode:
  # получить фактическую температуру от кровати либо использовать внешний датчик
  # или датчик от нагревателя кровати
  # внешний датчик должен быть назван кровать
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
   #############  Variable Setup  #############
  # получить состояние прутка либо с помощью безопасной переменной либо с помощью датчика отсутсвия
  {% if 'filament_switch_sensor runout' in printer.configfile.settings %}
    _RUNOUT_INFO
    {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
      {% set filament_loaded = printer['filament_switch_sensor runout'].filament_detected|lower %}
    {% else %}
      {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
    {% endif %}
  {% else %}
    {% set filament_loaded = printer.save_variables.variables.filament_loaded %}
  {% endif %}
  {% set targetBed = BED_TEMP|int%}
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={EXTRUDER_TEMP|int}
  # проверьте, загружен ли пруток 
  {% if filament_loaded == 'true' %}
    _DISPLAY_PLATE
    _CASELIGHT_ON
    _LCD_KNOB COLOR=RED BLINK=1
    CLEAR_PAUSE
    SET_GCODE_OFFSET Z=0.0
    M220 S100
    M221 S100
    M140 S{BED_TEMP|int + 0.9}
    _CG28
    # Move to Middle
    G90
    G0 Z5 F1800
    G0 X190 Y140 F18000
    M117 Heating Bed
    _PRINT_AR T="{"Bed act temp:%3dC target:%3dC target(%3dC)" % (actBed|int,targetBed|int,BED_TEMP|int)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
    M106 S102
    M190 S{BED_TEMP|int + 0.9}
    M140 S{BED_TEMP|int}
    M400 
  {% else %}
    _PRINT_AR T="No Filament loaded, print canceled!"
    BASE_CANCEL_PRINT
    UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  {% endif%}
  # вернуть статус, чтобы подготовиться к следующему запуску 
  _LCD_KNOB COLOR=RED
  # установить единицы измерения в миллиметры
  G21
  # использовать абсолютные координаты
  G90
  # использовать относительные расстояния для экструзии
  M83
  # парковка
  G32
  M109 S{EXTRUDER_TEMP|int}
  NOZZLECLEAN
  # парковка Z
  G28 Z
  # Check Extruder
  M117 Heating Extruder
  M109 S{EXTRUDER_TEMP|int}
  M106 S0
  M104 S{EXTRUDER_TEMP|int}
  PRIME_LINE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  
[gcode_macro PRINT_END]
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Получить границы #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Рассчитать спасительный ход #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### конец определений #####
  M400
  M220 S100
  M221 S100
  G92 E0
  M83
  G1 E-4.0 F3600
  G91
  G0 X{x_safe} Y{y_safe} Z{z_safe} F9000
  TURN_OFF_HEATERS
  M107
  G90
  G0 X5 Y280 F9000
  SET_GCODE_OFFSET Z=0.0
  G0 Z290 F600
  _LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

## Сбросить файл SD после завершения печати
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  MESH_LOAD AUTO=true
  _SET_PLATE_OFFSET
  _PRINT_AR T="Home" SHOW_LCD=true
  # Домой только при необходимости 
  _CG28
  G90
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

## продуть и очистить сопло перед печатью       
[gcode_macro NOZZLECLEAN]
gcode:
  # сохранить минимальную температуру экструзии в переменной
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28
  G90
  # перейти к месту продувки ведра
  G1 X0 Y0 Z10 F9000
  # проверьте, что температура экструдера выше минимальной температуры экструзии
  {% set extruder_target = printer.extruder.target %}
  {% if printer.extruder.temperature|int < minTemp|int %}
    _PRINT_AR T="{"Extruder Temp to low heat to %2dC" % (minTemp|int + 50)}"
    M109 S{minTemp|int + 50}
  {% endif %}
  G1 Z2.5 F900
  G92 E0
  M83
  G1 E5.00 F100
  G1 E5.00 F200
  G1 E-0.5 F800
  G4 P500
  _WIPE
  # восстановить предыдущую температуру экструдера
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  G90
  # перейти в положение пуска стеклоочистителя
  G92 E0
    G0 X0 Y0 F15000
  G1 X35 Y8 Z0.5 E5 F200
  G92 E0
  G1 E5 F100
  G92 E0
  G1 E-0.5 F800
  G92 E0
  G4 P500
  G1 X35 Y20 Z6.5 F6000
  #G0 X5.00 Y270 Z1.5 F3000
  ## переместите голову по диагонали к кисти
  #{% for wipe in range(5) %}
  #  {% for coordinate in [(25,270),(5,270)] %}
  #    G0 X{coordinate[0]} Y{coordinate[1] + 1.0 * wipe} F{6000 + 1000 * wipe}
  #  {% endfor %}
  #{% endfor %}
      
[gcode_macro PRIME_LINE]
default_parameter_SEG: 11
default_parameter_LENGHT: 220
default_parameter_EXTRUDE: 19
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # рассчитать значения каждого сегмента
  {% set y_seg = LENGHT|float / SEG|float %}
  {% set e_seg = EXTRUDE|float / SEG|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28
  G92 E0
  G90
  G1 X35 Y30 Z5 F5000.0
  G1 Z0.25 F900
  M83
  G91
  {% for segment in range(SEG|int-1) %}
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4
  {% for segment in range(SEG|int-1) %}
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  ;G1 Z5.0 F1500
  G92 E0
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  _CG28
  G90
  G0 X380 Y10 Z250 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  _CG28
  G90
  G0 X10 Y280 Z250 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  _CG28
  G90
  G0 X190 Y140 Z250 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  _CG28
  G90
  G0 X190 Y140 Z5 F9000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
default_parameter_SHOW_LCD: 'false'
gcode:
  {% if SHOW_LCD == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
default_parameter_TEXT: 'Timer'
## true ot false
default_parameter_SHOW_AR: 'false'
gcode:
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if SHOW_AR == 'true' %}
    {action_respond_info("%s %d:%02d" % (TEXT,minutes|int,seconds|int))}
  {% endif %}      

[gcode_macro M204]
rename_existing: M2041
gcode:
  {% if 'P' in params %}
    {% set accel = params.P %}
  {% elif 'S' in params %}
    {% set accel = params.S %}
  {% elif 'T' in params %}
    {% set accel = params.T %}
  {% endif %}
  {% set accel_to_decel = (accel|float * 2.0 / 3.0)|int %}
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh CoreXY_B-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro DUMP_SETTINGS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.settings %}
    {% set show = ['extruder'] %}
    {% if name1 is not in show %}
      {% set param = "printer.configfile.settings['%s'] = %s" % (name1, printer.configfile.settings[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_MCU_VER]
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
        

[gcode_macro DUMP_SATS]
gcode:
  {% set cpu_t = printer.system_stats.cputime %}
  {% set cpu_h = (cpu_t / 3600)|int %}
  {% set cpu_m = ((cpu_t / 60) % 60)|int %}
  {% set cpu_s = (cpu_t % 60)|int %}
  {% set sysload = printer.system_stats.sysload|float * 100.0 %}
  {% set mem_val = printer.system_stats.memavail|float / 8388608.0 %}
  {action_respond_info("klipper process statistic:
                        Head stalls: %d
                        CPU Time: %d:%02d:%02d
                        Sysload: %.2f percent
                        Mem Val: %.3f MB" % (printer.toolhead.stalls, cpu_h, cpu_m ,cpu_s, sysload, mem_val))}


[gcode_macro test1]
gcode:
  M220 S100
  test
  M220 S90
  test
  M220 S80
  test
  M220 S70
  test
  M220 S60
  test
  M220 S50
  test
  M220 S40
  test
  M220 S30
  test
  M220 S20
  test
  M220 S10
  test
  M220 S5
  test
 
[gcode_macro test]
gcode:
  G0 x380 y280 F18000
  G0 x0 y280
  G0 x380 y0
  G0 x0 y140
  G0 x380 y140
  G0 x0 y0
  G0 x380 y0
  G0 x380 y280
  G0 x0 y280
  G0 x0 y0
 